{"version":3,"file":"traviso.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/utils/calculations.ts","../../src/utils/constants.ts","../../src/utils/trace.ts","../../src/utils/map.ts","../../src/map/ObjectView.ts","../../src/map/TileView.ts","../../src/utils/easing.ts","../../src/map/MoveEngine.ts","../../src/pathFinding/GridNode.ts","../../src/pathFinding/BinaryHeap.ts","../../src/pathFinding/PathFinding.ts","../../src/map/EngineView.ts","../../src/utils/hello.ts","../../src/version.ts","../../src/index.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { DisplayObject } from 'pixi.js';\nimport { TPositionPair } from './map';\n\n/**\n * Checks if the value existy.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param value {unknown} value to check\n * @return {boolean} if the value existy or not\n */\nexport const existy = (value: unknown): boolean => {\n    return value !== null && value !== undefined;\n};\n\n/**\n * Linear maps a given number in a source range to a target range\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param v {number} value to map\n * @param min1 {number} minimum value of the source range\n * @param max1 {number} maximum value of the source range\n * @param min2 {number} minimum value of the target range\n * @param max2 {number} maximum value of the target range\n * @param noOutliers {boolean} If the outlier values won't be processed, default false\n * @return {number} mapped value according to target range\n */\nexport const mathMap = (\n    v: number,\n    min1: number,\n    max1: number,\n    min2: number,\n    max2: number,\n    noOutliers: boolean = false\n): number => {\n    if (noOutliers) {\n        if (v < min1) {\n            return min2;\n        } else if (v > max1) {\n            return max2;\n        }\n    }\n    return min2 + ((max2 - min2) * (v - min1)) / (max1 - min1);\n};\n\n/**\n * Produces dot product of two vectors.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param v1 {TPositionPair} first vector\n * @param v2 {TPositionPair} second vector\n * @return {number} dot product of two vectors\n */\nexport const dotProduct = (v1: TPositionPair, v2: TPositionPair): number => {\n    return v1.x * v2.x + v1.y * v2.y;\n};\n\n/**\n * Produces unit vector of a given vector.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param v {TPositionPair} source vector\n * @return {TPositionPair} unit vector\n */\nexport const getUnit = (v: TPositionPair): TPositionPair => {\n    const m = Math.sqrt(v.x * v.x + v.y * v.y);\n    return { x: v.x / m, y: v.y / m };\n};\n\n/**\n * Checks if the given point is the polygon defined by the vertices.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param gp {TPositionPair} point to check\n * @param vertices {Array(Array(Number))} array containing the vertices of the polygon\n * @return {boolean} if the point is inside the polygon\n */\nexport const isInPolygon = (gp: TPositionPair, vertices: number[][]): boolean => {\n    const testY = gp.y;\n    const testX = gp.x;\n    const nVert = vertices.length;\n    let i,\n        j,\n        c = false;\n    for (i = 0, j = nVert - 1; i < nVert; j = i++) {\n        if (\n            vertices[i][1] > testY !== vertices[j][1] > testY &&\n            testX <\n                ((vertices[j][0] - vertices[i][0]) * (testY - vertices[i][1])) / (vertices[j][1] - vertices[i][1]) +\n                    vertices[i][0]\n        ) {\n            c = !c;\n        }\n    }\n    return c;\n};\n\n/**\n * Calculates the distance between two points.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param p1 {TPositionPair} first point\n * @param p2 {TPositionPair} second point\n * @return {number} the distance between two points\n */\nexport const getDist = (p1: TPositionPair, p2: TPositionPair): number => {\n    return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n};\n\n/**\n * Calculates the global point with respect to given local point and scope.\n *\n * @method\n * @function\n * @private\n * @internal\n * @static\n *\n * @param lp {TPositionPair} local point\n * @param scope {PIXI.DisplayObject} local scope\n * @return {TPositionPair} global point\n */\nexport const localToGlobal = (lp: TPositionPair, scope: DisplayObject): TPositionPair => {\n    let sX = scope.position.x + lp.x;\n    let sY = scope.position.y + lp.y;\n\n    let p = scope.parent;\n    while (p) {\n        sX += p.position.x;\n        sY += p.position.y;\n        p = p.parent;\n    }\n\n    return {\n        x: sX,\n        y: sY,\n    };\n};\n\n/**\n * Calculates the local point with respect to given global point and local scope.\n *\n * @method\n * @function\n * @private\n * @internal\n * @static\n *\n * @param gp {TPositionPair} global point\n * @param scope {PIXI.DisplayObject} local scope\n * @return {TPositionPair} local point\n */\nexport const globalToLocal = (gp: TPositionPair, scope: DisplayObject): TPositionPair => {\n    let sX = scope.position.x;\n    let sY = scope.position.y;\n\n    let p = scope.parent;\n    while (p) {\n        sX += p.position.x;\n        sY += p.position.y;\n        p = p.parent;\n    }\n\n    return {\n        x: gp.x - sX,\n        y: gp.y - sY,\n    };\n};\n","import { ObjectVisualKey } from './map';\n\nexport type TDirection = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\n/** Type declaration for reserved direction IDs */\nexport type TDirections = {\n    /** idle, no direction */\n    readonly O: 0;\n    /** south */\n    readonly S: 1;\n    /** south-west */\n    readonly SW: 2;\n    /** west */\n    readonly W: 3;\n    /** north-west */\n    readonly NW: 4;\n    /** north */\n    readonly N: 5;\n    /** north-east */\n    readonly NE: 6;\n    /** east */\n    readonly E: 7;\n    /** south-east */\n    readonly SE: 8;\n};\n\n// export type Traviso = {\n//     DIRECTIONS: TDirections,\n\n// }\n\n/**\n * The direction IDs to be used in the engine\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @property\n * @static\n * @public\n * @constant\n */\nexport const DIRECTIONS: Readonly<TDirections> = {\n    O: 0,\n    S: 1,\n    SW: 2,\n    W: 3,\n    NW: 4,\n    N: 5,\n    NE: 6,\n    E: 7,\n    SE: 8,\n};\n\nexport type TReservedTextureIDs = ObjectVisualKey[];\n/**\n * Texture IDs reserved for internal use\n *\n * @static\n * @private\n * @constant\n * @property\n * @internal\n */\nexport const RESERVED_TEXTURE_IDS: Readonly<TReservedTextureIDs> = [\n    'idle',\n    'idle_s',\n    'idle_sw',\n    'idle_w',\n    'idle_nw',\n    'idle_n',\n    'idle_ne',\n    'idle_e',\n    'idle_se',\n    'move_s',\n    'move_sw',\n    'move_w',\n    'move_nw',\n    'move_n',\n    'move_ne',\n    'move_e',\n    'move_se',\n];\n\n/** Type declaration for the IDs of available path finding algorithms */\nexport type TPathFindingAlgorithmID = 0 | 1;\n/** Type declaration for available path finding algorithms */\nexport type TPathFindingAlgorithms = {\n    readonly ASTAR_ORTHOGONAL: TPathFindingAlgorithmID;\n    readonly ASTAR_DIAGONAL: TPathFindingAlgorithmID;\n};\n/**\n * The types of available path finding algorithms\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @property\n * @static\n * @public\n * @constant\n */\nexport const PF_ALGORITHMS: Readonly<TPathFindingAlgorithms> = {\n    ASTAR_ORTHOGONAL: 0,\n    ASTAR_DIAGONAL: 1,\n};\n\nexport const KEY_EMPTY_TILE: string = '0';\nexport const KEY_NO_OBJECTS: string = '0';\n","let logEnabled: boolean = true;\n\n/**\n * Writes logs to the browser console\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param s {string} text to log\n */\nexport function trace(s: string): void {\n    if (logEnabled) {\n        // eslint-disable-next-line no-console\n        self.console.log('TRAVISO: ' + s);\n    }\n}\n\n/**\n * Determines if TRAVISO can log helper text.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param enabled {boolean} enable logging or not, default `true`\n * @return {boolean} logging enabled or not\n */\nexport function enableDisableLogging(enabled: boolean = true): boolean {\n    return (logEnabled = enabled);\n}\n","import { Texture } from 'pixi.js';\nimport { EngineView } from '../map/EngineView';\nimport { TDirection, DIRECTIONS, RESERVED_TEXTURE_IDS } from './constants';\nimport { trace } from './trace';\n\nexport type ObjectVisualKey =\n    | 'idle'\n    | 'idle_s'\n    | 'idle_sw'\n    | 'idle_w'\n    | 'idle_nw'\n    | 'idle_n'\n    | 'idle_ne'\n    | 'idle_e'\n    | 'idle_se'\n    | 'move_s'\n    | 'move_sw'\n    | 'move_w'\n    | 'move_nw'\n    | 'move_n'\n    | 'move_ne'\n    | 'move_e'\n    | 'move_se'\n    | string;\n/** Type declaration for column-row pair objects */\nexport type TColumnRowPair = {\n    /** column index of the column-row pair */\n    c: number;\n    /** row index of the column-row pair */\n    r: number;\n};\n/** Type declaration for x-y position pair objects */\nexport type TPositionPair = {\n    /** x position of the pair */\n    x: number;\n    /** y position of the pair */\n    y: number;\n};\nexport type ObjectInfoTextures = { [key in ObjectVisualKey]: Texture[] };\nexport type ObjectInfoTextureNames = { [key in ObjectVisualKey]: string[] };\nexport type ObjectInfoInteractionOffsets = {\n    [key in ObjectVisualKey]: TColumnRowPair;\n};\n\nexport type TTileInfo = {\n    m: boolean;\n    t: Texture[];\n};\n\nexport type MapDataObjectVisualFrame = { path: string };\n\nexport type MapDataObjectVisual = {\n    frames: MapDataObjectVisualFrame[];\n    path: string;\n    extension: string;\n    numberOfFrames: number;\n    startIndex: number;\n    ipoc: number;\n    ipor: number;\n};\n\nexport type MapDataObjectVisuals = {\n    [key in ObjectVisualKey]: MapDataObjectVisual;\n};\n\nexport type MapDataTile = { movable: boolean; path: string };\nexport type MapDataTiles = {\n    [key: string]: MapDataTile;\n};\n\nexport interface IObjectInfo {\n    m: boolean;\n    i: boolean;\n    nt: boolean;\n    f: boolean;\n    s: unknown; // TODO: This is probably not being used any more\n    t: ObjectInfoTextures;\n    /** Interaction offsets for each visual defined for the object */\n    io: ObjectInfoInteractionOffsets;\n    rowSpan: number;\n    columnSpan: number;\n}\nexport interface IMapDataObject extends IObjectInfo {\n    movable: boolean;\n    interactive: boolean;\n    noTransparency: boolean;\n    floor: boolean;\n    visuals: MapDataObjectVisuals;\n    // added by engine\n    id: string;\n    textureNames: ObjectInfoTextureNames;\n}\nexport type TMapDataObjects = {\n    [key: string]: IMapDataObject;\n};\n\n/** Type declaration for processed map data */\nexport type TMapData = {\n    tiles: MapDataTiles;\n    objects: TMapDataObjects;\n    initialControllableLocation: {\n        columnIndex: number;\n        rowIndex: number;\n        controllableId: string;\n    };\n    tileHighlightImage: {\n        path: string;\n    };\n    singleGroundImage: {\n        path: string;\n        scale: number;\n    };\n    groundMap: Array<{ row: string }>;\n    objectsMap: Array<{ row: string }>;\n    // added by engine\n    groundMapData: string[][];\n    objectsMapData: string[][];\n};\n\n/**\n * Returns an object with all properties of a map-object defined by object-type\n *\n * @method\n * @function\n * @private\n * @static\n *\n * @param engine {EngineView} engine instance\n * @param objectType {string} type/id of the related object tag defined in the json file\n * @return {IObjectInfo} an object with certain properties of a map-object\n */\nexport const getObjectInfo = (engine: EngineView, objectType: string): IObjectInfo => {\n    const objInfo: IMapDataObject = engine.mapData.objects[objectType];\n    if (objInfo) {\n        const textures: ObjectInfoTextures = {};\n        for (const key in objInfo.textureNames) {\n            if (Object.prototype.hasOwnProperty.call(objInfo.textureNames, key)) {\n                textures[key] = getObjectTextures(engine, objectType, key);\n            }\n        }\n        return {\n            m: objInfo.m,\n            i: objInfo.i,\n            f: objInfo.f,\n            nt: objInfo.nt,\n            t: textures,\n            io: objInfo.io,\n            s: objInfo.s,\n            rowSpan: objInfo.rowSpan,\n            columnSpan: objInfo.columnSpan,\n        };\n    }\n\n    throw new Error('TRAVISO: No info defined for object type: ' + objectType);\n};\n/**\n * Returns an array of textures {PIXI.Texture} belong to a map-object defined by object-type and sprite-id\n *\n * @function getObjectTextures\n * @memberof TRAVISO\n * @static\n * @private\n * @param engine {EngineView} engine instance\n * @param objectType {string} type/id of the related object tag defined in the json file\n * @param visualId {string} id of the related v tag defined in the json file\n * @return {Array(PIXI.Texture)} an array of textures\n */\nexport const getObjectTextures = (engine: EngineView, objectType: string, visualId: ObjectVisualKey): Texture[] => {\n    const objInfo: IMapDataObject = engine.mapData.objects[objectType];\n    if (objInfo) {\n        let textures = null;\n        const textureNames = objInfo.textureNames[visualId];\n        if (textureNames && textureNames.length > 0) {\n            textures = [];\n            for (let j = 0; j < textureNames.length; j++) {\n                textures[textures.length] = Texture.from(textureNames[j]);\n            }\n        } else {\n            trace('No textures defined for object type: ' + objectType + ' and visualId: ' + visualId);\n        }\n        return textures;\n    }\n\n    throw new Error('TRAVISO: No info defined for object type: ' + objectType);\n};\n\n/**\n * Returns an object with all properties of a map-tile defined by tileType\n *\n * @method\n * @function\n * @static\n *\n * @param engine {EngineView} engine instance\n * @param tileType {string} type/id of the related tile tag defined in the json file\n * @return {TTileInfo} an information object with certain properties (movability and textures) of a map-tile\n */\nexport const getTileInfo = (engine: EngineView, tileType: string): TTileInfo => {\n    const tileInfo = engine.mapData.tiles[tileType];\n    if (tileInfo) {\n        return {\n            // m : tileInfo.m,\n            m: tileInfo.movable,\n            t: tileInfo.path ? [Texture.from(tileInfo.path)] : [],\n        };\n    } else if (engine.mapData.singleGroundImage) {\n        return {\n            m: parseInt(tileType) > 0,\n            t: [],\n        };\n    } else {\n        throw new Error('TRAVISO: No info defined for tile type: ' + tileType);\n    }\n};\n\n/**\n * Returns the predefined moving texture id for the given direction\n *\n * @method\n * @function\n * @static\n *\n * @param dir {TDirection} index of the direction\n * @return {ObjectVisualKey} texture id for the given direction\n */\nexport const getMovingDirVisualId = (dir: TDirection): ObjectVisualKey => {\n    return RESERVED_TEXTURE_IDS[dir + 8];\n};\n\n/**\n * Returns the predefined stationary texture id for the given direction\n *\n * @method\n * @function\n * @static\n *\n * @param dir {TDirection} index of the direction\n * @return {ObjectVisualKey} texture id for the given direction\n */\nexport const getStationaryDirVisualId = (dir: TDirection): ObjectVisualKey => {\n    return RESERVED_TEXTURE_IDS[dir];\n};\n\n/**\n * Returns the direction (id) between two locations\n *\n * @function getDirBetween\n * @memberof TRAVISO\n * @static\n * @private\n * @param r1 {number} row index of the first location\n * @param c1 {number} column index of the first location\n * @param r2 {number} row index of the second location\n * @param c2 {number} column index of the second location\n * @return {TDirection} direction id\n */\nexport const getDirBetween = (r1: number, c1: number, r2: number, c2: number): TDirection => {\n    let dir: TDirection = DIRECTIONS.S;\n    if (r1 === r2) {\n        if (c1 === c2) {\n            dir = DIRECTIONS.O;\n        } else if (c1 < c2) {\n            dir = DIRECTIONS.NE;\n        } else {\n            dir = DIRECTIONS.SW;\n        }\n    } else if (r1 < r2) {\n        if (c1 === c2) {\n            dir = DIRECTIONS.SE;\n        } else if (c1 < c2) {\n            dir = DIRECTIONS.E;\n        } else {\n            dir = DIRECTIONS.S;\n        }\n    } else if (r1 > r2) {\n        if (c1 === c2) {\n            dir = DIRECTIONS.NW;\n        } else if (c1 < c2) {\n            dir = DIRECTIONS.N;\n        } else {\n            dir = DIRECTIONS.W;\n        }\n    }\n    return dir;\n};\n","import { Container, AnimatedSprite } from 'pixi.js';\nimport { EngineView } from './EngineView';\nimport { existy } from '../utils/calculations';\nimport { TDirection, DIRECTIONS } from '../utils/constants';\nimport {\n    TColumnRowPair,\n    ObjectInfoInteractionOffsets,\n    ObjectInfoTextures,\n    ObjectVisualKey,\n    getMovingDirVisualId,\n    getObjectInfo,\n    getStationaryDirVisualId,\n    IObjectInfo,\n} from '../utils/map';\n\n/**\n * Visual class for the map-objects.\n *\n * @class ObjectView\n * @extends PIXI.Container\n */\nexport class ObjectView extends Container {\n    /**\n     * A reference to the engine view that the map-object sits in.\n     * @property {EngineView} engine\n     * @private\n     * @internal\n     */\n    private _engine: EngineView;\n    /**\n     * Type-id of the map-object as defined in the json file.\n     * @property\n     * @private\n     */\n    private _type: string;\n    /**\n     * Defines if the map-object is movable onto by other map-objects.\n     * @property\n     * @public\n     */\n    public isMovableTo: boolean;\n    /**\n     * Defines if the map-object is interactive/selectable.\n     * @property\n     * @public\n     */\n    public isInteractive: boolean;\n    /**\n     * Number of tiles that map-object covers horizontally on the isometric map\n     * @property\n     * @public\n     */\n    public columnSpan: number;\n    /**\n     * Number of tiles that map-object covers vertically on the isometric map\n     * @property\n     * @public\n     */\n    public rowSpan: number;\n\n    /**\n     * A dictionary for all the textures defined for the map-object.\n     * @property\n     * @private\n     */\n    private _textures: ObjectInfoTextures;\n\n    /**\n     * A dictionary for interaction offset points for each visual if defined in the map data file.\n     * @property\n     * @private\n     */\n    private _interactionOffsets: ObjectInfoInteractionOffsets;\n\n    /**\n     * If true doesn't allow transparency change on this object\n     * @property\n     * @public\n     */\n    public noTransparency: boolean;\n    /**\n     * Defines if the object is a floor object or not\n     * @property\n     * @public\n     */\n    public isFloorObject: boolean;\n    /**\n     * Interaction offset points for the active visual.\n     * @property\n     * @public\n     */\n    public currentInteractionOffset: TColumnRowPair;\n    /**\n     * Current direction of the object.\n     * @property\n     * @public\n     */\n    public currentDirection: TDirection;\n\n    /**\n     * Defines if the map-object is movable onto by other map-objects.\n     * @property\n     * @private\n     * @internal\n     */\n    private _container: AnimatedSprite;\n    /**\n     * Position of the object in terms of column and row index.\n     * @property\n     * @public\n     */\n    public mapPos: TColumnRowPair;\n\n    /**\n     * @property\n     * @function\n     * @private\n     * @internal\n     */\n    private onContainerAnimCompleteCallback: (objectView: ObjectView) => unknown;\n    /**\n     * @property\n     * @function\n     * @private\n     * @internal\n     */\n    private onContainerAnimComplete_delayed_binded: () => void;\n    /**\n     * @property\n     * @function\n     * @private\n     * @internal\n     */\n    private onContainerAnimComplete_binded: () => void;\n\n    /**\n     * Visual class constructor for the map-objects.\n     *\n     * @constructor\n     *\n     * @param engine {EngineView} the engine instance that the map-object sits in, required\n     * @param type {number} type-id of the object as defined in the JSON file\n     * @param animSpeed {number} animation speed for the animated visuals, default 0.5\n     */\n    constructor(engine: EngineView, type: string, animSpeed: number = 0.5) {\n        super();\n\n        this.onContainerAnimComplete_delayed_binded = this.onContainerAnimComplete_delayed.bind(this);\n        this.onContainerAnimComplete_binded = this.onContainerAnimComplete.bind(this);\n\n        this._engine = engine;\n        this._type = type;\n\n        const info: IObjectInfo = getObjectInfo(this._engine, this._type);\n        this.isMovableTo = info.m;\n        this.isInteractive = info.i;\n        this.interactive = this.interactiveChildren = false;\n        this.isFloorObject = info.f;\n        this.noTransparency = info.nt;\n        this.rowSpan = info.rowSpan;\n        this.columnSpan = info.columnSpan;\n        const xAnchor = this.rowSpan / (this.columnSpan + this.rowSpan);\n        this._textures = info.t;\n        this._interactionOffsets = info.io;\n        this.currentInteractionOffset = this._interactionOffsets.idle;\n\n        this._container = new AnimatedSprite(this._textures.idle);\n        this._container.interactive = this._container.interactiveChildren = false;\n        this._container.anchor.x = xAnchor;\n        this._container.anchor.y = 1;\n        this.addChild(this._container);\n        this.animSpeed = animSpeed;\n        this._container.gotoAndStop(0);\n    }\n\n    /**\n     * Animation speed for the animated visuals included in the map-object visuals.\n     *\n     * @property\n     * @default 0.5\n     */\n    public get animSpeed(): number {\n        return this._container.animationSpeed;\n    }\n    public set animSpeed(value: number) {\n        this._container.animationSpeed = existy(value) && value > 0 ? value : 0.5;\n    }\n\n    /**\n     * Changes the map-object's texture(s) according to the specified direction-id and the state of the map-object (moving or stationary).\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param direction {TDirection} direction-id as defined in `TRAVISO.DIRECTIONS`\n     * @param moving {boolean} if the requested visuals are for moving or stationary state, default `false`\n     * @param stopOnFirstFrame {boolean} if true stops on the first frame after changing the visuals, default `false`\n     * @param noLoop {boolean} if true the animation will not loop after the first run, default `false`\n     * @param onAnimComplete {Function} callback function to call if 'noLoop' is true after the first run of the animation, default `null`\n     * @param animSpeed {number} animation speed for the animated visuals, stays the same if not defined, default `null`\n     */\n    public changeVisualToDirection(\n        direction: TDirection,\n        moving: boolean = false,\n        stopOnFirstFrame: boolean = false,\n        noLoop: boolean = false,\n        onAnimComplete: (objectView: ObjectView) => unknown = null,\n        animSpeed: number = null\n    ): void {\n        if (\n            !this.changeVisual(\n                moving ? getMovingDirVisualId(direction) : getStationaryDirVisualId(direction),\n                stopOnFirstFrame,\n                noLoop,\n                onAnimComplete,\n                animSpeed\n            )\n        ) {\n            if (!this.changeVisual('idle', stopOnFirstFrame, noLoop, onAnimComplete, animSpeed)) {\n                throw new Error(\"no 'idle' visual defined as backup for object type \" + this._type);\n            } else {\n                this.currentDirection = DIRECTIONS.O;\n            }\n        } else {\n            this.currentDirection = direction;\n        }\n    }\n\n    /**\n     * Changes the map-object's texture(s) according to the specified visual-id.\n     *\n     * @method\n     * @function\n     * @public\n     * @internal\n     *\n     * @param vId {string} visual-id\n     * @param stopOnFirstFrame {boolean} if true stops on the first frame after changing the visuals, default `false`\n     * @param noLoop {boolean} if true the animation will not loop after the first run, default `false`\n     * @param onAnimComplete {Function} callback function to call if 'noLoop' is true after the first run of the animation, default `null`\n     * @param animSpeed {number} animation speed for the animated visuals, stays the same if not defined, default `null`\n     * @return {boolean} `true` if the visual-id was valid and the visual has changed without errors\n     */\n    public changeVisual(\n        vId: ObjectVisualKey,\n        stopOnFirstFrame: boolean = false,\n        noLoop: boolean = false,\n        onAnimComplete: (objectView: ObjectView) => unknown = null,\n        animSpeed: number = null\n    ): boolean {\n        if (!this._textures[vId]) {\n            // trace(\"!!! No textures defined for vId: \" + vId);\n            return false;\n        }\n\n        this.currentInteractionOffset = this._interactionOffsets[vId];\n\n        if (this._container.textures === this._textures[vId] && !noLoop) {\n            this._container.loop = !noLoop;\n            if (existy(animSpeed) && animSpeed > 0) {\n                this.animSpeed = animSpeed;\n            }\n            return true;\n        }\n\n        this._container.textures = this._textures[vId];\n\n        if (!stopOnFirstFrame && this._textures[vId].length > 1) {\n            this._container.loop = !noLoop;\n            if (noLoop && onAnimComplete) {\n                this.onContainerAnimCompleteCallback = onAnimComplete;\n                this._container.onComplete = this.onContainerAnimComplete_binded;\n            }\n            if (existy(animSpeed) && animSpeed > 0) {\n                this.animSpeed = animSpeed;\n            }\n            this._container.gotoAndPlay(0);\n        } else {\n            this._container.gotoAndStop(0);\n        }\n\n        if (this._engine.objectUpdateCallback) {\n            this._engine.objectUpdateCallback(this);\n        }\n\n        return true;\n    }\n\n    private onContainerAnimComplete(): void {\n        setTimeout(this.onContainerAnimComplete_delayed_binded, 100);\n    }\n    private onContainerAnimComplete_delayed(): void {\n        this.onContainerAnimCompleteCallback(this);\n        this.onContainerAnimCompleteCallback = null;\n    }\n\n    /**\n     * Clears all references.\n     *\n     * @method\n     * @function\n     * @public\n     */\n    public destroy(): void {\n        if (this._container) {\n            this._engine = null;\n            this._textures = null;\n            // this.removeChild(this._container);\n            // this._container.textures = null;\n            this._container.onComplete = null;\n            this._container = null;\n        }\n    }\n}\n","import { Texture, Container, Graphics, Sprite, AnimatedSprite } from 'pixi.js';\nimport { EngineView } from './EngineView';\nimport { TColumnRowPair, getTileInfo } from '../utils/map';\nimport { ITweenTarget } from './MoveEngine';\n\n/**\n * Visual class for the map-tiles.\n *\n * @class TileView\n * @extends PIXI.Container\n * @constructor\n * @param engine {EngineView} the engine instance that the map-tile sits in\n * @param type {string} type-id of the tile as defined in the JSON file\n */\nexport class TileView extends Container {\n    /**\n     * A reference to the engine view that the map-tile sits in.\n     * @property\n     * @private\n     * @internal\n     */\n    private _engine: EngineView;\n    /**\n     * Type-id of the map-tile as defined in the JSON file.\n     * @property\n     * @private\n     */\n    private _type: string;\n    /**\n     * Defines the positions of the vertices of the tile.\n     * @property\n     * @public\n     */\n    public vertices: number[][];\n    /**\n     * Defines if the map-tile is movable onto by map-objects.\n     * @property\n     * @public\n     */\n    public isMovableTo: boolean;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private _tileGraphics: AnimatedSprite;\n    /**\n     * The visual that will be used to highlight the tile.\n     * @property\n     * @private\n     * @internal\n     */\n    private _highlightedOverlay: Sprite | Graphics;\n    /**\n     * The highlight state of the map-tile.\n     * @property\n     * @private\n     * @internal\n     */\n    private _isHighlighted: boolean = false;\n    /**\n     * Position of the tile in terms of column and row index.\n     * @property\n     * @public\n     */\n    public mapPos: TColumnRowPair;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private onHighlightTweenEnd_binded: () => void;\n\n    /**\n     * Visual class constructor for the map-tiles.\n     *\n     * @constructor\n     *\n     * @param engine {EngineView} the engine instance that the map-tile sits in\n     * @param type {string} type-id of the tile as defined in the JSON file\n     */\n    constructor(engine: EngineView, type: string) {\n        super();\n\n        this.onHighlightTweenEnd_binded = this.onHighlightTweenEnd.bind(this);\n\n        this._engine = engine;\n        this._type = type;\n\n        const halfHeight = this._engine.tileHalfHeight;\n        const halfWidth = this._engine.tileHalfWidth;\n\n        this.vertices = [\n            [-halfWidth, 0],\n            [0, -halfHeight],\n            [halfWidth, 0],\n            [0, halfHeight],\n        ];\n\n        const tileInfo = getTileInfo(this._engine, this._type);\n        this.isMovableTo = tileInfo.m;\n\n        if (tileInfo.t.length > 0) {\n            this._tileGraphics = new AnimatedSprite(tileInfo.t);\n            this._tileGraphics.anchor.x = 0.5;\n            this._tileGraphics.anchor.y = 0.5;\n            this.addChild(this._tileGraphics);\n            this._tileGraphics.gotoAndStop(parseInt(this._type));\n        }\n\n        // const colorsArray = [0x0106ff, 0x3b6d14, 0x8789ff, 0xb32bf9, 0xeb36d0, 0xfe0000, 0xeb3647, 0xf27e31, 0xffea01, 0x00ff18, 0x3b6d14, 0xfa9bbb, 0xf9c7bc, 0x8d6729, 0x633e07];\n        // const c = colorsArray[ this._type < 2 ? this._type : 0 ];\n\n        // this._tileGraphics = new PIXI.Graphics();\n        // this._tileGraphics.clear();\n        // this._tileGraphics.beginFill(c);\n        // this._tileGraphics.moveTo(this.vertices[0][0], this.vertices[0][1]);\n        // for (let i=1; i < this.vertices.length; i++)\n        // {\n        // this._tileGraphics.lineTo(this.vertices[i][0], this.vertices[i][1]);\n        // };\n        // this._tileGraphics.endFill();\n\n        if (this._engine.mapData.tileHighlightImage) {\n            this._highlightedOverlay = new Sprite(Texture.from(this._engine.mapData.tileHighlightImage.path));\n            this._highlightedOverlay.anchor.x = 0.5;\n            this._highlightedOverlay.anchor.y = 0.5;\n            this.addChild(this._highlightedOverlay);\n        } else {\n            this._highlightedOverlay = new Graphics();\n            this._highlightedOverlay.clear();\n            this._highlightedOverlay.lineStyle(\n                this._engine.tileHighlightStrokeAlpha <= 0 ? 0 : 2,\n                this._engine.tileHighlightStrokeColor,\n                this._engine.tileHighlightStrokeAlpha\n            );\n            this._highlightedOverlay.beginFill(\n                this._engine.tileHighlightFillColor,\n                this._engine.tileHighlightFillAlpha\n            );\n            this._highlightedOverlay.moveTo(this.vertices[0][0], this.vertices[0][1]);\n            for (let i = 1; i < this.vertices.length; i++) {\n                this._highlightedOverlay.lineTo(this.vertices[i][0], this.vertices[i][1]);\n            }\n            this._highlightedOverlay.lineTo(this.vertices[0][0], this.vertices[0][1]);\n            this._highlightedOverlay.endFill();\n            this.addChild(this._highlightedOverlay);\n        }\n\n        this._highlightedOverlay.scale.x = this._highlightedOverlay.scale.y = 0.1;\n        this._highlightedOverlay.visible = false;\n    }\n\n    /**\n     * Changes the highlight state of the map-tile.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param isHighlighted {boolean} if the tile is being highlighted or not\n     * @param instant {boolean} if the change will be instant or animated, default `false`\n     */\n    public setHighlighted(isHighlighted: boolean, instant: boolean = false): void {\n        if (this._isHighlighted !== isHighlighted) {\n            if (instant) {\n                this._highlightedOverlay.scale.x = this._highlightedOverlay.scale.y = isHighlighted ? 1 : 0.1;\n                this._highlightedOverlay.visible = isHighlighted;\n                this._isHighlighted = isHighlighted;\n                return;\n            }\n\n            if (isHighlighted) {\n                this._highlightedOverlay.visible = isHighlighted;\n            }\n\n            this._isHighlighted = isHighlighted;\n\n            const ts = isHighlighted ? 1 : 0.1;\n            if (this._highlightedOverlay.scale.x === ts) {\n                this._highlightedOverlay.visible = isHighlighted;\n            } else {\n                this._highlightedOverlay.scale.x = this._highlightedOverlay.scale.y = isHighlighted ? 0.1 : 1;\n\n                // @formatter:off\n                this._engine.moveEngine.addTween(\n                    this._highlightedOverlay.scale as unknown as ITweenTarget,\n                    0.5,\n                    { x: ts, y: ts },\n                    0,\n                    'linear',\n                    true,\n                    this.onHighlightTweenEnd_binded\n                );\n                // @formatter:on\n            }\n        }\n    }\n    /**\n     * @method\n     * @function\n     * @private\n     * @internal\n     */\n    private onHighlightTweenEnd(): void {\n        this._highlightedOverlay.visible = this._isHighlighted;\n    }\n\n    /**\n     * Clears all references.\n     *\n     * @method\n     * @function\n     * @public\n     */\n    public destroy(): void {\n        if (this._engine) {\n            if (this._engine && this._engine.moveEngine) {\n                this._engine.moveEngine.killTweensOf(this._highlightedOverlay.scale as unknown as ITweenTarget);\n            }\n            this._engine = null;\n            this._highlightedOverlay = null;\n            this._tileGraphics = null;\n        }\n    }\n}\n","export type EasingType =\n    | 'easeInOut'\n    | 'easeInOutQuad'\n    | 'Quad.easeInOut'\n    | 'easeIn'\n    | 'easeInQuad'\n    | 'Quad.easeIn'\n    | 'easeOut'\n    | 'easeOutQuad'\n    | 'Quad.easeOut'\n    | 'linear';\nexport type EasingFunction = (t: number, b: number, c: number, d: number) => number;\n/**\n * Returns the proper easing method to use depending on the easing id specified.\n *\n * @method getEasingFunc\n * @private\n * @param e {string} the easing id\n * @return {Function} the easing method to use\n */\nexport const getEasingFunc = (e: EasingType): EasingFunction => {\n    if (e === 'easeInOut' || e === 'easeInOutQuad' || e === 'Quad.easeInOut') {\n        return easeInOutQuad;\n    } else if (e === 'easeIn' || e === 'easeInQuad' || e === 'Quad.easeIn') {\n        return easeInQuad;\n    } else if (e === 'easeOut' || e === 'easeOutQuad' || e === 'Quad.easeOut') {\n        return easeOutQuad;\n    } else {\n        return linearTween;\n    }\n};\n\n/**\n * Linear tween calculation.\n *\n * @method linearTween\n * @private\n * @param t {number} current time\n * @param b {number} initial value\n * @param c {number} difference with the target value\n * @param d {number} total time\n * @return {number} result of the calculation\n */\nexport const linearTween = (t: number, b: number, c: number, d: number): number => {\n    return (c * t) / d + b;\n};\n/**\n * Quadratic ease-in tween calculation.\n *\n * @method easeInQuad\n * @private\n * @param t {number} current time\n * @param b {number} initial value\n * @param c {number} difference with the target value\n * @param d {number} total time\n * @return {number} result of the calculation\n */\nexport const easeInQuad = (t: number, b: number, c: number, d: number): number => {\n    t /= d;\n    return c * t * t + b;\n};\n\n/**\n * Quadratic ease-out tween calculation.\n *\n * @method easeOutQuad\n * @private\n * @param t {number} current time\n * @param b {number} initial value\n * @param c {number} difference with the target value\n * @param d {number} total time\n * @return {number} result of the calculation\n */\nexport const easeOutQuad = (t: number, b: number, c: number, d: number): number => {\n    t /= d;\n    return -c * t * (t - 2) + b;\n};\n/**\n * Quadratic ease-in-out tween calculation.\n *\n * @method easeInOutQuad\n * @private\n * @param t {number} current time\n * @param b {number} initial value\n * @param c {number} difference with the target value\n * @param d {number} total time\n * @return {number} result of the calculation\n */\nexport const easeInOutQuad = (t: number, b: number, c: number, d: number): number => {\n    t /= d / 2;\n    if (t < 1) {\n        return (c / 2) * t * t + b;\n    }\n    t--;\n    return (-c / 2) * (t * (t - 2) - 1) + b;\n};\n","/**\n * @author Hakan Karlidag - @axaq\n */\n\nimport { Ticker } from 'pixi.js';\nimport { trace } from '../utils/trace';\nimport { EngineView } from '../map/EngineView';\nimport { ObjectView } from '../map/ObjectView';\nimport { GridNode } from '../pathFinding/GridNode';\nimport { getDist, getUnit } from '../utils/calculations';\nimport { EasingFunction, EasingType, getEasingFunc } from '../utils/easing';\nimport { TColumnRowPair, TPositionPair } from '../utils/map';\n\nexport interface IMovable extends ObjectView {\n    // [key: string]: any,\n    speedUnit: TPositionPair;\n    speedMagnitude: number;\n    currentPath: GridNode[];\n    currentPathStep: number;\n    currentTarget: TPositionPair;\n    currentTargetTile: GridNode;\n    currentReachThresh: number;\n    prevPosition: TPositionPair;\n}\n\nexport interface ITween {\n    target: { [key: string]: unknown };\n    duration: number;\n    delay: number;\n    easingFunc: EasingFunction;\n    overwrite: boolean;\n    onComplete: () => void;\n    totalFrames: number;\n    currentFrame: number;\n    vars: { [key: string]: { b: number; c: number } };\n}\n\nexport interface ITweenTarget {\n    [key: string]: unknown;\n    tweens?: ITween[];\n}\n\n/**\n * Holds and manages all the logic for tween animations and map-object movement on the map.\n * This is created and used by EngineView instances.\n *\n * @class MoveEngine\n */\nexport class MoveEngine {\n    /**\n     * A reference to the engine view that uses this move engine.\n     * @property\n     * @private\n     */\n    private _engine: EngineView;\n\n    /**\n     * The speed value to be used for object movements if not defined specifically.\n     * @property\n     * @private\n     * @default `3`\n     */\n    private _defaultSpeed: number;\n    /**\n     * Specifies if the move-engine will process the object movements.\n     * @property\n     * @private\n     * @default `false`\n     */\n    private _activeForMovables: boolean = false;\n    /**\n     * Specifies if the move-engine will process the tweens.\n     * @property\n     * @private\n     * @default `false`\n     */\n    private _activeForTweens: boolean = false;\n    /**\n     * Specifies if the move-engine will process the tweens and object movements.\n     * @property\n     * @private\n     * @default `true`\n     */\n    private _processFrame: boolean = true;\n    /**\n     * The list to store current map-objects in move.\n     * @property\n     * @private\n     * @default `[]`\n     */\n    private _movables: IMovable[] = [];\n    /**\n     * The list to store targets for the current tweens.\n     * @property\n     * @private\n     * @default `[]`\n     */\n    private _tweenTargets: ITweenTarget[] = [];\n    /**\n     * Used to calculate how many frames a tween will take to process.\n     * @property\n     * @private\n     * @default `60`\n     */\n    private _fps: number = 60;\n\n    private _ticker: Ticker;\n    private _processFunc: () => void;\n\n    /**\n     * Constructor function for MoveEngine.\n     *\n     * @constructor\n     *\n     * @param engine {EngineView} the engine instance that the animations will perform on\n     * @param defaultSpeed {number} default speed for the map-objects to be used when they move on map, default 3\n     */\n    constructor(engine: EngineView, defaultSpeed: number = 3) {\n        this._engine = engine;\n        this._defaultSpeed = defaultSpeed;\n\n        this._processFunc = this.run.bind(this);\n        this._ticker = new Ticker();\n        this._ticker.add(this._processFunc);\n        this._ticker.start();\n    }\n\n    /**\n     * Adds a single tween for the given object.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param o {ITweenTarget} the object to add tween animation to\n     * @param duration {number} the duration of the tween animation in seconds\n     * @param vars {{ [key: string]: number }} the object defining which properties of the target object will be animated\n     * @param delay {number} the amount of waiting before the tween animation starts, in seconds, default `0`\n     * @param easing {EasingType} type of the easing, default `'linear'`\n     * @param overwrite {boolean} if the other tween animations assigned to the same object are going to be killed, default `false`\n     * @param onComplete {Function} callback function to be called after the tween animation finished, default `null`\n     */\n    public addTween(\n        o: ITweenTarget,\n        duration: number,\n        vars: { [key: string]: number },\n        delay: number = 0,\n        easing: EasingType = 'linear',\n        overwrite: boolean = false,\n        onComplete: () => void = null\n    ): void {\n        let v: { [key: string]: { b: number; c: number } } = null;\n        for (const prop in vars) {\n            if (o[prop] !== vars[prop]) {\n                if (!v) {\n                    v = {};\n                }\n                v[prop] = { b: o[prop] as number, c: vars[prop] - (o[prop] as number) };\n            }\n        }\n\n        if (v) {\n            const t: ITween = {\n                target: o,\n                duration: duration,\n                delay: Number(delay) || 0,\n                easingFunc: getEasingFunc(easing),\n                overwrite: overwrite || false,\n                onComplete: onComplete || null,\n                totalFrames: duration * this._fps,\n                currentFrame: 0,\n                vars: v,\n            };\n\n            const idx = this._tweenTargets.indexOf(o);\n            if (idx >= 0) {\n                let tweens: ITween[] = o.tweens;\n                if (!tweens) {\n                    tweens = [];\n                }\n                if (t.overwrite) {\n                    for (let i = 0; i < tweens.length; i++) {\n                        tweens[i] = null;\n                    }\n                    tweens = [];\n                }\n\n                tweens[tweens.length] = t;\n                o.tweens = tweens;\n            } else {\n                o.tweens = [t];\n                this._tweenTargets[this._tweenTargets.length] = o;\n            }\n\n            if (this._tweenTargets.length > 0 && !this._activeForTweens) {\n                this._activeForTweens = true;\n            }\n        }\n    }\n\n    /**\n     * Removes a single tween from the given object.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param o {ITweenTarget} the object to remove the tween animation from\n     * @param t {ITween} the tween to be removed from the object\n     * @return {boolean} if the tween is found and removed\n     */\n    public removeTween(o: ITweenTarget, t: ITween): boolean {\n        let targetRemoved = false;\n\n        if (o && t) {\n            const idx = this._tweenTargets.indexOf(o);\n            if (idx >= 0) {\n                if (this._tweenTargets[idx].tweens && this._tweenTargets[idx].tweens.length > 0) {\n                    const tweens = this._tweenTargets[idx].tweens;\n                    const idx2 = tweens.indexOf(t);\n                    if (idx2 >= 0) {\n                        t.onComplete = null;\n                        t.easingFunc = null;\n                        t.target = null;\n\n                        tweens.splice(idx2, 1);\n                        if (tweens.length === 0) {\n                            this._tweenTargets.splice(idx, 1);\n                            targetRemoved = true;\n                        }\n                    } else {\n                        throw new Error('No tween defined for this object');\n                    }\n                } else {\n                    throw new Error('No tween defined for this object');\n                }\n            } else {\n                throw new Error('No tween target defined for this object');\n            }\n\n            if (this._tweenTargets.length === 0) {\n                this._activeForTweens = false;\n            }\n        }\n\n        return targetRemoved;\n    }\n\n    /**\n     * Removes and kills all tweens assigned to the given object.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param o {ITweenTarget} the object to remove the tween animations from\n     * @return {boolean} if any tween is found and removed from the object specified\n     */\n    public killTweensOf(o: ITweenTarget): boolean {\n        let targetRemoved = false;\n\n        const idx = this._tweenTargets.indexOf(o);\n        if (idx >= 0) {\n            if (this._tweenTargets[idx].tweens && this._tweenTargets[idx].tweens.length > 0) {\n                const tweens = this._tweenTargets[idx].tweens;\n                for (let j = 0; j < tweens.length; j++) {\n                    tweens[j].onComplete = null;\n                    tweens[j].easingFunc = null;\n                    tweens[j].target = null;\n                    tweens[j] = null;\n                }\n                this._tweenTargets[idx].tweens = null;\n            }\n\n            this._tweenTargets.splice(idx, 1);\n\n            targetRemoved = true;\n        }\n\n        if (this._tweenTargets.length === 0) {\n            this._activeForTweens = false;\n        }\n\n        return targetRemoved;\n    }\n\n    /**\n     * Removes and kills all the tweens in operation currently.\n     *\n     * @method\n     * @function\n     * @private\n     */\n    private removeAllTweens(): void {\n        this._activeForTweens = false;\n\n        let tweens, i, j;\n        const len = this._tweenTargets.length;\n        for (i = 0; i < len; i++) {\n            tweens = this._tweenTargets[i].tweens;\n            for (j = 0; j < tweens.length; j++) {\n                tweens[j].onComplete = null;\n                tweens[j].easingFunc = null;\n                tweens[j].target = null;\n                tweens[j] = null;\n            }\n            this._tweenTargets[i].tweens = null;\n            this._tweenTargets[i] = null;\n        }\n\n        this._tweenTargets = [];\n    }\n\n    /**\n     * Adds a map-object as movable to the engine.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param o {IMovable} the map-object to add as movable\n     */\n    public addMovable(o: IMovable): void {\n        if (this._movables.indexOf(o) >= 0) {\n            return;\n        }\n\n        this._movables[this._movables.length] = o;\n\n        if (this._movables.length > 0 && !this._activeForMovables) {\n            this._activeForMovables = true;\n        }\n\n        // all movables needs to have the following variables:\n        // speedMagnitude, speedUnit (more to come...)\n\n        // NOTE: might be a good idea to add all necessary parameters to the object here\n    }\n\n    /**\n     * Removes a map-object from the current movables list.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param o {IMovable} the map-object to remove\n     * @return {boolean} if the map-object is removed or not\n     */\n    public removeMovable(o: IMovable): boolean {\n        const idx = this._movables.indexOf(o);\n        if (idx !== -1) {\n            o.speedUnit = { x: 0, y: 0 };\n            this._movables.splice(idx, 1);\n        }\n        if (this._movables.length === 0) {\n            this._activeForMovables = false;\n        }\n        // TODO: might be a good idea to remove/reset all related parameters from the object here\n\n        return idx !== -1;\n    }\n\n    /**\n     * Removes all movables.\n     *\n     * @method\n     * @function\n     * @private\n     */\n    private removeAllMovables(): void {\n        this._activeForMovables = false;\n\n        const len = this._movables.length;\n        for (let i = 0; i < len; i++) {\n            this._movables[i] = null;\n        }\n\n        this._movables = [];\n    }\n\n    /**\n     * Changes the current path of a map-object.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param o {IMovable} the map-object to add the path to\n     * @param path {Array(GridNode)} the new path\n     * @param speed {number} speed of the map-object to be used during movement, if not defined it uses previous speed or the MoveEngine's default speed, default null\n     */\n    public addNewPathToObject(o: IMovable, path: GridNode[], speed: number): void {\n        if (o.currentPath && o.currentTarget) {\n            path[path.length] = o.currentPath[o.currentPathStep];\n        }\n        o.currentPath = path;\n        o.currentPathStep = o.currentPath.length - 1;\n        o.speedMagnitude = speed || o.speedMagnitude || this._defaultSpeed;\n    }\n\n    /**\n     * Prepares a map-object for movement.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param o {IMovable} the movable map-object\n     * @param path {Array(GridNode)} the path for the object\n     * @param speed {number} speed of the map-object to be used during movement, if not defined it uses previous speed or the MoveEngine's default speed, default null\n     */\n    public prepareForMove(o: IMovable, path: GridNode[], speed: number = null): void {\n        o.currentPath = path;\n        o.currentPathStep = o.currentPath.length - 1;\n        o.speedMagnitude = speed || o.speedMagnitude || this._defaultSpeed;\n    }\n\n    /**\n     * Sets movement specific parameters for the map-object according to target location.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param o {IMovable} the movable map-object\n     * @param pos {TColumnRowPair} target location\n     */\n    public setMoveParameters(o: IMovable, pos: TColumnRowPair): void {\n        const px = this._engine.getTilePosXFor(pos.r, pos.c);\n        const py = this._engine.getTilePosYFor(pos.r, pos.c) + this._engine.tileHalfHeight;\n\n        o.speedUnit = getUnit({ x: px - o.position.x, y: py - o.position.y });\n\n        o.currentTarget = { x: px, y: py };\n        o.currentReachThresh = Math.ceil(\n            Math.sqrt(o.speedUnit.x * o.speedUnit.x + o.speedUnit.y * o.speedUnit.y) * o.speedMagnitude\n        );\n    }\n\n    /**\n     * Method that precesses a single frame.\n     *\n     * @method\n     * @function\n     * @private\n     */\n    private run(): void {\n        // NOTE: Write an alternative with a real time driven animator\n\n        if (this._processFrame) {\n            let len: number, o: IMovable, i: number;\n            if (this._activeForMovables) {\n                len = this._movables.length;\n\n                let dist;\n                for (i = 0; i < len; i++) {\n                    o = this._movables[i];\n\n                    // move object\n\n                    // speed vector (magnitude and direction)\n\n                    o.prevPosition = { x: o.position.x, y: o.position.y };\n\n                    // check for target reach\n                    if (o.currentTarget) {\n                        dist = getDist(o.position, o.currentTarget);\n                        if (dist <= o.currentReachThresh) {\n                            // reached to the target\n                            o.position.x = o.currentTarget.x;\n                            o.position.y = o.currentTarget.y;\n\n                            this._engine.onObjMoveStepEnd(o);\n                            i--;\n                            len--;\n                            continue;\n                        }\n                    }\n\n                    o.position.x += o.speedMagnitude * o.speedUnit.x;\n                    o.position.y += o.speedMagnitude * o.speedUnit.y;\n\n                    // check for tile change\n                    this._engine.checkForTileChange(o);\n                    this._engine.checkForFollowCharacter(o);\n\n                    // check for direction change\n                }\n\n                // will need a different loop to process crashes\n                // for (i=0; i < len; i++)\n                // {\n                // o = this._movables[i];\n                // }\n            }\n\n            if (this._activeForTweens) {\n                // and a loop for tween animations\n                len = this._tweenTargets.length;\n                let t: ITween,\n                    tt: ITweenTarget,\n                    tweens: ITween[],\n                    j: number,\n                    vars: { [key: string]: { b: number; c: number } };\n                for (i = 0; i < len; i++) {\n                    tt = this._tweenTargets[i];\n                    tweens = tt.tweens;\n                    for (j = 0; j < tweens.length; j++) {\n                        t = tweens[j];\n                        t.currentFrame++;\n                        vars = t.vars;\n                        for (const prop in vars) {\n                            tt[prop] = t.easingFunc(t.currentFrame, vars[prop].b, vars[prop].c, t.totalFrames);\n                        }\n\n                        if (t.currentFrame >= t.totalFrames) {\n                            if (t.onComplete) {\n                                t.onComplete();\n                            }\n                            if (this.removeTween(tt, t)) {\n                                i--;\n                                len--;\n                            }\n                            j--;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Clears all references and stops all animations and tweens.\n     *\n     * @method\n     * @function\n     * @public\n     */\n    public destroy(): void {\n        trace('MoveEngine destroy');\n\n        this._processFrame = false;\n\n        if (this._ticker) {\n            this._ticker.stop();\n        }\n\n        this.removeAllMovables();\n        this.removeAllTweens();\n        this._movables = null;\n        this._tweenTargets = null;\n        this._engine = null;\n        this._ticker = null;\n    }\n}\n","import { TColumnRowPair } from '../utils/map';\n\nexport class GridNode {\n    public x: number;\n    public y: number;\n    public weight: number;\n    public staticWeight: number;\n    public mapPos: TColumnRowPair;\n    // calculation params\n    public closed: boolean;\n    public parent: GridNode;\n    public visited: boolean;\n    public h: number;\n    public g: number;\n    public f: number;\n\n    constructor(c: number, r: number, weight: number) {\n        this.x = c;\n        this.y = r;\n        this.weight = weight;\n        this.mapPos = { c, r };\n    }\n\n    public toString(): string {\n        return '[' + String(this.x) + ' ' + String(this.y) + ']';\n    }\n    public getCost(fromNeighbor: GridNode): number {\n        // Take diagonal weight into consideration.\n        if (fromNeighbor && fromNeighbor.x !== this.x && fromNeighbor.y !== this.y) {\n            return this.weight * 1.41421;\n        }\n        return this.weight;\n    }\n\n    public isWall(): boolean {\n        return this.weight === 0;\n    }\n}\n","export class BinaryHeap {\n    private content: unknown[];\n    private scoreFunction: (element: unknown) => number;\n\n    constructor(scoreFunction: (element: unknown) => number) {\n        this.content = [];\n        this.scoreFunction = scoreFunction;\n    }\n\n    public push(element: unknown): void {\n        // Add the new element to the end of the array.\n        this.content.push(element);\n\n        // Allow it to sink down.\n        this.sinkDown(this.content.length - 1);\n    }\n    public pop(): unknown {\n        // Store the first element so we can return it later.\n        const result = this.content[0];\n        // Get the element at the end of the array.\n        const end = this.content.pop();\n        // If there are any elements left, put the end element at the\n        // start, and let it bubble up.\n        if (this.content.length > 0) {\n            this.content[0] = end;\n            this.bubbleUp(0);\n        }\n        return result;\n    }\n\n    // private remove(node: unknown) {\n    //     const i = this.content.indexOf(node);\n\n    //     // When it is found, the process seen in 'pop' is repeated\n    //     // to fill up the hole.\n    //     const end = this.content.pop();\n\n    //     if (i !== this.content.length - 1) {\n    //         this.content[i] = end;\n\n    //         if (this.scoreFunction(end) < this.scoreFunction(node)) {\n    //             this.sinkDown(i);\n    //         }\n    //         else {\n    //             this.bubbleUp(i);\n    //         }\n    //     }\n    // }\n    public size(): number {\n        return this.content.length;\n    }\n    public rescoreElement(node: unknown): void {\n        this.sinkDown(this.content.indexOf(node));\n    }\n    private sinkDown(n: number): void {\n        // Fetch the element that has to be sunk.\n        const element = this.content[n];\n\n        // When at 0, an element can not sink any further.\n        while (n > 0) {\n            // Compute the parent element's index, and fetch it.\n            const parentN = ((n + 1) >> 1) - 1,\n                parent = this.content[parentN];\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element;\n                this.content[n] = parent;\n                // Update 'n' to continue at the new position.\n                n = parentN;\n            }\n            // Found a parent that is less, no need to sink any further.\n            else {\n                break;\n            }\n        }\n    }\n    private bubbleUp(n: number): void {\n        // Look up the target element and its score.\n        const length = this.content.length,\n            element = this.content[n],\n            elemScore = this.scoreFunction(element);\n        let conditionMet = true;\n        while (conditionMet) {\n            // Compute the indices of the child elements.\n            const child2N = (n + 1) << 1,\n                child1N = child2N - 1;\n            // This is used to store the new position of the element, if any.\n            let swap = null,\n                child1Score;\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                const child1 = this.content[child1N];\n                child1Score = this.scoreFunction(child1);\n\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N;\n                }\n            }\n\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                const child2 = this.content[child2N],\n                    child2Score = this.scoreFunction(child2);\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\n                    swap = child2N;\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap !== null) {\n                this.content[n] = this.content[swap];\n                this.content[swap] = element;\n                n = swap;\n            }\n            // Otherwise, we are done.\n            else {\n                conditionMet = false;\n                break;\n            }\n        }\n    }\n}\n","import { BinaryHeap } from './BinaryHeap';\nimport { GridNode } from './GridNode';\n\nexport type PathFindingHeuristicFunction = (pos0: GridNode, pos1: GridNode) => number;\nexport type PathFindingSearchOptions = {\n    heuristic?: PathFindingHeuristicFunction;\n    closest?: boolean;\n};\nexport type PathFindingOptions = {\n    diagonal?: boolean;\n    closest?: boolean;\n};\n\n// Based on http://github.com/bgrins/javascript-astar v0.4.0\n\n/**\n * Includes all path finding logic.\n *\n * @class PathFinding\n */\nexport class PathFinding {\n    /**\n     * @property {Array(Array(GridNode))} grid\n     * @private\n     */\n    private grid: GridNode[][];\n    /**\n     * @property {boolean} diagonal\n     * @private\n     */\n    private diagonal: boolean;\n    /**\n     * Active heuristic method to use\n     * @property\n     * @private\n     */\n    private heuristic: PathFindingHeuristicFunction;\n\n    private closest: boolean;\n\n    private nodes: GridNode[];\n    private dirtyNodes: GridNode[];\n\n    /**\n     * See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n     *\n     * @property\n     * @private\n     * @static\n     */\n    private static readonly HEURISTICS: {\n        [key in 'manhattan' | 'diagonal']: PathFindingHeuristicFunction;\n    } = {\n        manhattan: (pos0: GridNode, pos1: GridNode) => {\n            const d1 = Math.abs(pos1.x - pos0.x);\n            const d2 = Math.abs(pos1.y - pos0.y);\n            return d1 + d2;\n        },\n        diagonal: (pos0: GridNode, pos1: GridNode) => {\n            const D = 1;\n            const D2 = Math.sqrt(2);\n            const d1 = Math.abs(pos1.x - pos0.x);\n            const d2 = Math.abs(pos1.y - pos0.y);\n            return D * (d1 + d2) + (D2 - 2 * D) * Math.min(d1, d2);\n        },\n    };\n    /**\n     * Constructor function for the PathFinding class.\n     *\n     * @constructor\n     *\n     * @param mapSizeC {number} number of columns\n     * @param mapSizeR {number} number of rows\n     * @param options {PathFindingOptions}  settings for the search algorithm, default `{}`\n     */\n    constructor(mapSizeC: number, mapSizeR: number, options: PathFindingOptions = {}) {\n        //define map\n        this.nodes = [];\n        this.diagonal = !!options.diagonal;\n        this.heuristic = this.diagonal ? PathFinding.HEURISTICS.diagonal : PathFinding.HEURISTICS.manhattan;\n        this.closest = !!options.closest;\n        this.grid = [];\n        let c = 0,\n            r = 0,\n            node: GridNode;\n        for (c = 0; c < mapSizeC; c++) {\n            this.grid[c] = [];\n            for (r = 0; r < mapSizeR; r++) {\n                node = new GridNode(c, r, 1);\n                this.grid[c][r] = node;\n                this.nodes.push(node);\n            }\n        }\n        this.init();\n    }\n\n    /**\n     * Cleans/resets all nodes.\n     *\n     * @method init\n     * @private\n     */\n    private init(): void {\n        this.dirtyNodes = [];\n        for (let i = 0; i < this.nodes.length; i++) {\n            this.cleanNode(this.nodes[i]);\n        }\n    }\n\n    // /**\n    //  * Cleans only dirty nodes.\n    //  *\n    //  * @method cleanDirty\n    //  * @private\n    //  */\n    // private cleanDirty(): void {\n    //     for (let i = 0; i < this.dirtyNodes.length; i++) {\n    //         this.cleanNode(this.dirtyNodes[i]);\n    //     }\n    //     this.dirtyNodes = [];\n    // }\n\n    /**\n     * Marks a node as dirty.\n     *\n     * @method markDirty\n     * @private\n     * @param node {TRAVISO.PathFinding.GridNode} node to be marked\n     */\n    private markDirty(node: GridNode): void {\n        this.dirtyNodes.push(node);\n    }\n\n    /**\n     * Finds adjacent/neighboring cells of a single node.\n     *\n     * @method neighbors\n     * @param node {TRAVISO.PathFinding.GridNode} source node\n     * @return {Array(TRAVISO.PathFinding.GridNode)} an array of available cells\n     */\n    private neighbors(node: GridNode): GridNode[] {\n        const ret = [],\n            x = node.x,\n            y = node.y,\n            grid = this.grid;\n\n        // West\n        if (grid[x - 1] && grid[x - 1][y]) {\n            ret.push(grid[x - 1][y]);\n        }\n        // East\n        if (grid[x + 1] && grid[x + 1][y]) {\n            ret.push(grid[x + 1][y]);\n        }\n        // South\n        if (grid[x] && grid[x][y - 1]) {\n            ret.push(grid[x][y - 1]);\n        }\n        // North\n        if (grid[x] && grid[x][y + 1]) {\n            ret.push(grid[x][y + 1]);\n        }\n\n        if (this.diagonal) {\n            // Southwest\n            if (grid[x - 1] && grid[x - 1][y - 1]) {\n                ret.push(grid[x - 1][y - 1]);\n            }\n            // Southeast\n            if (grid[x + 1] && grid[x + 1][y - 1]) {\n                ret.push(grid[x + 1][y - 1]);\n            }\n            // Northwest\n            if (grid[x - 1] && grid[x - 1][y + 1]) {\n                ret.push(grid[x - 1][y + 1]);\n            }\n            // Northeast\n            if (grid[x + 1] && grid[x + 1][y + 1]) {\n                ret.push(grid[x + 1][y + 1]);\n            }\n        }\n        return ret;\n    }\n\n    public toString(): string {\n        const graphString: string[] = [],\n            nodes = this.grid; // when using grid\n        let rowDebug: number[], row: GridNode[], x: number, len: number, y: number, l: number;\n        for (x = 0, len = nodes.length; x < len; x++) {\n            rowDebug = [];\n            row = nodes[x];\n            for (y = 0, l = row.length; y < l; y++) {\n                rowDebug.push(row[y].weight);\n            }\n            graphString.push(rowDebug.join(' '));\n        }\n        return graphString.join('\\n');\n    }\n\n    /**\n     * Solves path finding for the given source and destination locations.\n     *\n     * @method solve\n     * @private\n     * @param originC {number} column index of the source location\n     * @param originR {number} row index of the source location\n     * @param destC {number} column index of the destination location\n     * @param destR {number} row index of the destination location\n     * @return {Array(Object)} solution path\n     */\n    public solve(originC: number, originR: number, destC: number, destR: number): GridNode[] {\n        const start = this.grid[originC][originR];\n        const end = this.grid[destC][destR];\n        const result = this.search(start, end, {\n            heuristic: this.heuristic,\n            closest: this.closest,\n        });\n        return result && result.length > 0 ? result : null;\n    }\n\n    /**\n     * Finds available adjacent cells of an area defined by location and size.\n     *\n     * @method getAdjacentOpenCells\n     * @param cellC {number} column index of the location\n     * @param cellR {number} row index of the location\n     * @param sizeC {number} column size of the area\n     * @param sizeR {number} row size of the area\n     * @return {Array(Object)} an array of available cells\n     */\n    public getAdjacentOpenCells(cellC: number, cellR: number, sizeC: number, sizeR: number): GridNode[] {\n        let r: number,\n            c: number,\n            cellArray: GridNode[] = [];\n        for (r = cellR; r > cellR - sizeR; r--) {\n            for (c = cellC; c < cellC + sizeC; c++) {\n                // NOTE: concat is browser dependent. It is fastest for Chrome. Might be a good idea to use for loop or \"a.push.apply(a, b);\" for other browsers\n                cellArray = cellArray.concat(this.neighbors(this.grid[c][r]));\n            }\n        }\n        return cellArray;\n    }\n\n    private pathTo(node: GridNode): GridNode[] {\n        let curr = node;\n        const path: GridNode[] = [];\n        while (curr.parent) {\n            path.push(curr);\n            curr = curr.parent;\n        }\n        // return path.reverse();\n        return path;\n    }\n\n    private getHeap(): BinaryHeap {\n        return new BinaryHeap((node: unknown) => (node as GridNode).f);\n    }\n\n    /**\n     * Perform an A* Search on a graph given a start and end node.\n     *\n     * @method\n     * @function\n     * @private\n     *\n     * @param start {GridNode} beginning node of search\n     * @param end {GridNode} end node of the search\n     * @param options {Object} Search options\n     * @return {Array(GridNode)} resulting list of nodes\n     */\n    private search(start: GridNode, end: GridNode, options: PathFindingSearchOptions = {}): GridNode[] {\n        this.init();\n\n        const heuristic = options.heuristic || PathFinding.HEURISTICS.manhattan;\n        const closest = options.closest || false;\n\n        const openHeap = this.getHeap();\n        let closestNode = start; // set the start node to be the closest if required\n\n        start.h = heuristic(start, end);\n\n        openHeap.push(start);\n\n        while (openHeap.size() > 0) {\n            // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n            const currentNode: GridNode = openHeap.pop() as GridNode;\n\n            // End case -- result has been found, return the traced path.\n            if (currentNode === end) {\n                return this.pathTo(currentNode);\n            }\n\n            // Normal case -- move currentNode from open to closed, process each of its neighbors.\n            currentNode.closed = true;\n\n            // Find all neighbors for the current node.\n            const neighbors = this.neighbors(currentNode);\n\n            for (let i = 0, il = neighbors.length; i < il; ++i) {\n                const neighbor = neighbors[i];\n\n                if (neighbor.closed || neighbor.isWall()) {\n                    // Not a valid node to process, skip to next neighbor.\n                    continue;\n                }\n\n                // The g score is the shortest distance from start to current node.\n                // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n                const gScore = currentNode.g + neighbor.getCost(currentNode),\n                    beenVisited = neighbor.visited;\n\n                if (!beenVisited || gScore < neighbor.g) {\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n                    neighbor.visited = true;\n                    neighbor.parent = currentNode;\n                    neighbor.h = neighbor.h || heuristic(neighbor, end);\n                    neighbor.g = gScore;\n                    neighbor.f = neighbor.g + neighbor.h;\n                    this.markDirty(neighbor);\n                    if (closest) {\n                        // If the neighbor is closer than the current closestNode or if it's equally close but has\n                        // a cheaper path than the current closest node then it becomes the closest node\n                        if (\n                            neighbor.h < closestNode.h ||\n                            (neighbor.h === closestNode.h && neighbor.g < closestNode.g)\n                        ) {\n                            closestNode = neighbor;\n                        }\n                    }\n\n                    if (!beenVisited) {\n                        // Pushing to heap will put it in proper place based on the 'f' value.\n                        openHeap.push(neighbor);\n                    } else {\n                        // Already seen the node, but since it has been re-scored we need to reorder it in the heap\n                        openHeap.rescoreElement(neighbor);\n                    }\n                }\n            }\n        }\n\n        if (closest) {\n            return this.pathTo(closestNode);\n        }\n\n        // No result was found - empty array signifies failure to find path.\n        return [];\n    }\n\n    private cleanNode(node: GridNode): void {\n        node.f = 0;\n        node.g = 0;\n        node.h = 0;\n        node.visited = false;\n        node.closed = false;\n        node.parent = null;\n    }\n\n    /**\n     * Checks if the location is occupied/available or not.\n     *\n     * @method isCellFilled\n     * @param c {number} column index of the location\n     * @param r {number} row index of the location\n     * @return {Array(Object)} if the location is not available\n     */\n    public isCellFilled(c: number, r: number): boolean {\n        if (this.grid[c][r].weight === 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Sets individual cell state for ground layer.\n     *\n     * @method setCell\n     * @param c {number} column index of the location\n     * @param r {number} row index of the location\n     * @param movable {boolean} free to move or not\n     */\n    public setCell(c: number, r: number, movable: number): void {\n        this.grid[c][r].staticWeight = this.grid[c][r].weight = movable;\n    }\n\n    /**\n     * Sets individual cell state for objects layer.\n     *\n     * @method setDynamicCell\n     * @param c {number} column index of the location\n     * @param r {number} row index of the location\n     * @param movable {boolean} free to move or not\n     */\n    public setDynamicCell(c: number, r: number, movable: number): void {\n        // if it is movable by static tile property\n        if (this.grid[c][r].staticWeight !== 0) {\n            this.grid[c][r].weight = movable;\n        }\n    }\n\n    /**\n     * Clears all references.\n     *\n     * @method\n     * @function\n     * @public\n     */\n    public destroy(): void {\n        this.grid = null;\n        this.nodes = null;\n        this.dirtyNodes = null;\n        this.heuristic = null;\n    }\n}\n","import {\n    Texture,\n    Container,\n    Graphics,\n    InteractionData,\n    InteractionEvent,\n    Loader,\n    Sprite,\n    DisplayObject,\n} from 'pixi.js';\nimport { ObjectView } from './ObjectView';\nimport { TileView } from './TileView';\nimport { MoveEngine, IMovable, ITweenTarget } from './MoveEngine';\nimport { GridNode } from '../pathFinding/GridNode';\nimport { PathFinding } from '../pathFinding/PathFinding';\nimport { existy, getDist, isInPolygon, mathMap } from '../utils/calculations';\nimport { KEY_EMPTY_TILE, KEY_NO_OBJECTS, PF_ALGORITHMS } from '../utils/constants';\nimport { trace } from '../utils/trace';\nimport {\n    TColumnRowPair,\n    getDirBetween,\n    TMapData,\n    IMapDataObject,\n    MapDataObjectVisual,\n    ObjectInfoInteractionOffsets,\n    ObjectInfoTextureNames,\n    ObjectVisualKey,\n    TPositionPair,\n} from '../utils/map';\n\n/**\n * Type declaration for position frame setting.\n */\nexport type TPositionFrame = {\n    /** x position of the frame */\n    x: number;\n    /** y position of the frame */\n    y: number;\n    /** width of the frame */\n    w: number;\n    /** height of the frame */\n    h: number;\n};\n/**\n * Type declaration for engine-specific configuration.\n */\nexport type TEngineConfiguration = {\n    /**\n     * minimum scale that the PIXI.Container for the map can get, default 0.5\n     * @default 0.5\n     */\n    minScale?: number;\n    /**\n     * maximum scale that the PIXI.Container for the map can get, default 1.5\n     * @default 1.5\n     */\n    maxScale?: number;\n    /** minimum zoom level, engine defined  */\n    minZoom?: number;\n    /** maximum zoom level, engine defined  */\n    maxZoom?: number;\n    /**\n     * zoom increment amount calculated by the engine according to user settings, default 0.5\n     * @default 0.5\n     */\n    zoomIncrement?: number;\n    /**\n     * used to calculate zoom increment, defined by user, default 5\n     * @default 5\n     */\n    numberOfZoomLevels?: number;\n    /**\n     * initial zoom level of the map, default 0\n     * @default 0\n     */\n    initialZoomLevel?: number;\n    /**\n     * specifies whether to zoom instantly or with a tween animation, default false\n     * @default false\n     */\n    instantCameraZoom?: boolean;\n\n    /**\n     * height of a single isometric tile, default 74\n     * @default 74\n     */\n    tileHeight?: number;\n    /**\n     * the angle between the top-left edge and the horizontal diagonal of a isometric quad, default 30\n     * @default 30\n     */\n    isoAngle?: number;\n\n    /**\n     * frame to position the engine, default `{ x : 0, y : 0, w : 800, h : 600 }`\n     * @default { x : 0, y : 0, w : 800, h : 600 }\n     */\n    initialPositionFrame?: TPositionFrame;\n\n    /**\n     * the type of path finding algorithm two use, default `TRAVISO.PF_ALGORITHMS.ASTAR_ORTHOGONAL`\n     * @default TRAVISO.PF_ALGORITHMS.ASTAR_ORTHOGONAL\n     */\n    pathFindingType?: number;\n    /**\n     * whether to return the path to the closest node if the target is unreachable, default false\n     * @default false\n     */\n    pathFindingClosest?: boolean;\n\n    /**\n     * defines if the camera will follow the current controllable or not, default true\n     * @default true\n     */\n    followCharacter?: boolean;\n    /**\n     * specifies whether the camera moves instantly or with a tween animation to the target location, default false\n     * @default false\n     */\n    instantCameraRelocation?: boolean;\n    /**\n     * specifies whether the map-objects will be moved to target location instantly or with an animation, default false\n     * @default false\n     */\n    instantObjectRelocation?: boolean;\n\n    /**\n     * Make objects transparent when the controllable is behind them, default true\n     * @default true\n     */\n    changeTransparencies?: boolean;\n\n    /**\n     * Highlight the path when the current controllable moves on the map, default true\n     * @default true\n     */\n    highlightPath?: boolean;\n    /**\n     * Highlight the target tile when the current controllable moves on the map, default true\n     * @default true\n     */\n    highlightTargetTile?: boolean;\n    /**\n     * Animate the tile highlights, default true\n     * @default true\n     */\n    tileHighlightAnimated?: boolean;\n    /**\n     * Color code for the tile highlight fill (this will be overridden if a highlight-image is defined), default 0x80d7ff\n     * @default 0x80d7ff\n     */\n    tileHighlightFillColor?: number;\n    /**\n     * Alpha value for the tile highlight fill (this will be overridden if a highlight-image is defined), default 0.5\n     * @default 0.5\n     */\n    tileHighlightFillAlpha?: number;\n    /**\n     * Color code for the tile highlight stroke (this will be overridden if a highlight-image is defined), default 0xFFFFFF\n     * @default 0xFFFFFF\n     */\n    tileHighlightStrokeColor?: number;\n    /**\n     * Alpha value for the tile highlight stroke (this will be overridden if a highlight-image is defined), default 1.0\n     * @default 1.0\n     */\n    tileHighlightStrokeAlpha?: number;\n    /**\n     * When a tile selected don't move the controllable immediately but still call 'tileSelectCallback', default false\n     * @default false\n     */\n    dontAutoMoveToTile?: boolean;\n    /**\n     * Looks for a path every time an object moves to a new tile (set to false if you don't have other moving objects on your map), default true\n     * @default true\n     */\n    checkPathOnEachTile?: boolean;\n\n    /**\n     * Enable dragging the map with touch-and-touchmove or mousedown-and-mousemove on the map, default true\n     * @default true\n     */\n    mapDraggable?: boolean;\n\n    /**\n     * Background color, if defined the engine will create a solid colored background for the map, default null\n     * @default null\n     */\n    backgroundColor?: number;\n    /**\n     * Creates a mask using the position frame defined by 'initialPositionFrame' property or the 'posFrame' parameter that is passed to 'repositionContent' method, default false\n     * @default false\n     */\n    useMask?: boolean;\n\n    /** The path to the json file that defines map data, required */\n    mapDataPath: string;\n    /**\n     * Array of paths to the assets that are desired to be loaded by traviso, no need to use if assets are already loaded to PIXI cache, default null\n     * @default null\n     */\n    assetsToLoad?: string[];\n\n    /**\n     * Callback function that will be called once everything is loaded and engine instance is ready, default null\n     * @default null\n     */\n    engineInstanceReadyCallback?: (engineInstance: EngineView) => unknown;\n    /**\n     * Callback function that will be called when a tile is selected (call params will be the row and column indexes of the tile selected), default null\n     * @default null\n     */\n    tileSelectCallback?: (r: number, c: number) => unknown;\n    /**\n     * Callback function that will be called when a tile with an interactive map-object on it is selected (call param will be the object selected), default null\n     * @default null\n     */\n    objectSelectCallback?: (objectView: ObjectView) => unknown;\n    /**\n     * Callback function that will be called when any moving object reaches its destination (call param will be the moving object itself), default null\n     * @default null\n     */\n    objectReachedDestinationCallback?: (objectView: ObjectView) => unknown;\n    /**\n     * Callback function that will be called when any moving object is in move and there are other objects on the next tile, default null\n     * @default null\n     */\n    otherObjectsOnTheNextTileCallback?: (objectView: ObjectView, otherObjectViews: ObjectView[]) => unknown;\n    /**\n     * Callback function that will be called every time an objects direction or position changed, default null\n     * @default null\n     */\n    objectUpdateCallback?: (objectView: ObjectView) => unknown;\n};\n\n/**\n * Main PIXI.Container class to hold all views within the engine and all map related logic.\n *\n * @class EngineView\n * @extends PIXI.Container\n */\nexport class EngineView extends Container {\n    /**\n     * Internal property holding the engine configuration.\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _config: TEngineConfiguration;\n\n    /**\n     * The default height of a single isometric tile\n     *\n     * @default 74\n     * @property\n     * @private\n     * @static\n     */\n    private static readonly DEFAULT_TILE_H: number = 74;\n\n    /**\n     * The default angle (in degrees) between the top-left edge and the horizontal diagonal of a isometric quad\n     *\n     * @default 30\n     * @property\n     * @private\n     * @static\n     */\n    private static readonly DEFAULT_ISO_ANGLE: number = 30;\n\n    /**\n     * Half-height of a single isometric tile\n     *\n     * @default 37\n     * @property\n     * @public\n     */\n    public readonly tileHalfHeight: number;\n\n    /**\n     * Half-width of a single isometric tile\n     *\n     * @default 64\n     * @property\n     * @public\n     */\n    public readonly tileHalfWidth: number;\n\n    /**\n     * Variable holding the parsed and processed map data\n     *\n     * @property\n     * @public\n     */\n    public mapData: TMapData;\n\n    /**\n     * MoveEngine instance to handle all animations and tweens\n     *\n     * @property\n     * @public\n     */\n    public moveEngine: MoveEngine;\n    /**\n     * Current scale of the map's display object\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _currentScale: number;\n    /**\n     * Current zoom amount of the map\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _currentZoom: number;\n    /**\n     * Active position frame for the engine.\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _posFrame: TPositionFrame = { x: 0, y: 0, w: 800, h: 600 };\n    /**\n     * Active external center point for the engine.\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _externalCenter: TPositionPair;\n\n    /**\n     * Solid colored background\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _bg: Graphics;\n    /**\n     * Mask graphics for the mask\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _mapMask: Graphics;\n    /**\n     * Display object for the map visuals\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _mapContainer: Container;\n    /**\n     * Display object for the ground/terrain visuals\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _groundContainer: Container;\n    /**\n     * Display object for the map-object visuals\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _objContainer: Container;\n    /**\n     * Number of rows in the isometric map\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _mapSizeR: number;\n    /**\n     * Number of columns in the isometric map\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _mapSizeC: number;\n    /**\n     * Array to hold map-tiles\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _tileArray: TileView[][];\n    /**\n     * Array to hold map-objects\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _objArray: ObjectView[][][];\n    /**\n     * PathFinding instance to handle all path finding logic\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _pathFinding: PathFinding;\n    /**\n     * Current controllable map-object that will be the default object to move in user interactions\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _currentControllable: ObjectView;\n    /**\n     * Vertices of the map\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _mapVertices: number[][];\n    /**\n     * Total width of all ground tiles\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _mapVisualWidthReal: number;\n    /**\n     * Total height of all ground tiles\n     *\n     * @property\n     * @private\n     * @internal\n     */\n    private _mapVisualHeightReal: number;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private _currentFocusLocation: TColumnRowPair;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private _mapVisualWidthScaled: number;\n    /**\n     * @default `false`\n     * @property\n     * @private\n     * @internal\n     */\n    private _dragging: boolean = false;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private _dragInitStartingX: number;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private _dragInitStartingY: number;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private _dragPrevStartingX: number;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private _dragPrevStartingY: number;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private onMouseUp_binded: (event: InteractionEvent) => void;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private onMouseDown_binded: (event: InteractionEvent) => void;\n    /**\n     * @property\n     * @private\n     * @internal\n     */\n    private onMouseMove_binded: (event: InteractionEvent) => void;\n\n    /**\n     * Constructor method for the main PIXI.Container class to hold all views within the engine and all map related logic.\n     *\n     * @constructor\n     * @param config {TEngineConfiguration} configuration object for the isometric engine instance\n     */\n    constructor(config: TEngineConfiguration) {\n        super();\n\n        this.onMouseUp_binded = this.onMouseUp.bind(this);\n        this.onMouseDown_binded = this.onMouseDown.bind(this);\n        this.onMouseMove_binded = this.onMouseMove.bind(this);\n\n        this._config = config;\n\n        // set the properties that are set by default when not defined by the user\n        this._config.followCharacter = existy(this._config.followCharacter) ? this._config.followCharacter : true;\n        this._config.changeTransparencies = existy(this._config.changeTransparencies)\n            ? this._config.changeTransparencies\n            : true;\n        this._config.highlightPath = existy(this._config.highlightPath) ? this._config.highlightPath : true;\n        this._config.highlightTargetTile = existy(this._config.highlightTargetTile)\n            ? this._config.highlightTargetTile\n            : true;\n        this._config.tileHighlightAnimated = existy(this._config.tileHighlightAnimated)\n            ? this._config.tileHighlightAnimated\n            : true;\n        this._config.tileHighlightFillColor = existy(this._config.tileHighlightFillColor)\n            ? this._config.tileHighlightFillColor\n            : 0x80d7ff;\n        this._config.tileHighlightFillAlpha = existy(this._config.tileHighlightFillAlpha)\n            ? this._config.tileHighlightFillAlpha\n            : 0.5;\n        this._config.tileHighlightStrokeColor = existy(this._config.tileHighlightStrokeColor)\n            ? this._config.tileHighlightStrokeColor\n            : 0xffffff;\n        this._config.tileHighlightStrokeAlpha = existy(this._config.tileHighlightStrokeAlpha)\n            ? this._config.tileHighlightStrokeAlpha\n            : 1.0;\n        this._config.dontAutoMoveToTile = existy(this._config.dontAutoMoveToTile)\n            ? this._config.dontAutoMoveToTile\n            : false;\n        this._config.checkPathOnEachTile = existy(this._config.checkPathOnEachTile)\n            ? this._config.checkPathOnEachTile\n            : true;\n        this._config.mapDraggable = existy(this._config.mapDraggable) ? this._config.mapDraggable : true;\n        this._config.isoAngle = existy(this._config.isoAngle) ? this._config.isoAngle : EngineView.DEFAULT_ISO_ANGLE;\n        this._config.tileHeight = existy(this._config.tileHeight) ? this._config.tileHeight : EngineView.DEFAULT_TILE_H;\n\n        this.setZoomParameters(\n            this._config.minScale,\n            this._config.maxScale,\n            this._config.numberOfZoomLevels,\n            this._config.initialZoomLevel,\n            this._config.instantCameraZoom\n        );\n\n        this.tileHalfHeight = this._config.tileHeight / 2;\n        this.tileHalfWidth = this.tileHalfHeight * Math.tan(((90 - this._config.isoAngle) * Math.PI) / 180);\n        // this.TILE_W = this.tileHalfWidth * 2;\n\n        this.loadAssetsAndData();\n    }\n\n    /**\n     * Handles loading of necessary assets and map data for the given engine instance.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     */\n    private loadAssetsAndData(): void {\n        if (!this._config.mapDataPath) {\n            throw new Error(\n                \"TRAVISO: No JSON-file path defined for map data. Please check your configuration object that you pass to the 'getEngineInstance' method.\"\n            );\n        } else if (this._config.mapDataPath.split('.').pop() !== 'json') {\n            throw new Error('TRAVISO: Invalid map-data file path. This file has to be a json file.');\n        }\n\n        const loader = new Loader();\n        loader.add('mapData', this._config.mapDataPath);\n\n        if (this._config.assetsToLoad && this._config.assetsToLoad.length > 0) {\n            loader.add(this._config.assetsToLoad);\n        }\n\n        loader.load(this.assetsAndDataLoaded.bind(this));\n\n        // TRAVISO.loadData();\n    }\n\n    /**\n     * Handles loading of map data for the given engine instance.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param loader {Loader} PIXI's loader instance\n     */\n    private assetsAndDataLoaded(loader: Loader): void {\n        // console.log('assetsAndDataLoaded', resources.mapData.data);\n\n        const mapData: TMapData = loader.resources.mapData.data as TMapData;\n\n        // initial controls\n\n        if (!existy(mapData.initialControllableLocation)) {\n            trace(\n                \"Map-data file warning: No 'initialControllableLocation' defined. Ignore this warning if you are adding it later manually.\"\n            );\n        } else if (\n            !existy(mapData.initialControllableLocation.columnIndex) ||\n            !existy(mapData.initialControllableLocation.rowIndex)\n        ) {\n            trace(\"Map-data file warning: 'initialControllableLocation' exists but it is not defined properly.\");\n            mapData.initialControllableLocation = null;\n        }\n\n        if (mapData.tileHighlightImage && !mapData.tileHighlightImage.path) {\n            trace(\"Map-data file warning: 'tileHighlightImage' exists but its 'path' is not defined properly.\");\n            mapData.tileHighlightImage = null;\n        }\n\n        if (mapData.singleGroundImage && !mapData.singleGroundImage.path) {\n            trace(\"Map-data file warning: 'singleGroundImage' exists but its 'path' is not defined properly.\");\n            mapData.singleGroundImage = null;\n        }\n\n        let i: number, j: number, arr: string[];\n        let rows = mapData.groundMap;\n        mapData.groundMapData = [];\n        for (i = 0; i < rows.length; i++) {\n            arr = String(rows[i].row).replace(/\\s/g, '').split(',');\n            // remove empty spaces in a row and cast to an array\n            for (j = arr.length; j--; ) {\n                arr[j] = arr[j] || KEY_EMPTY_TILE;\n            }\n            mapData.groundMapData[i] = arr;\n        }\n\n        rows = mapData.objectsMap;\n        mapData.objectsMapData = [];\n        for (i = 0; i < rows.length; i++) {\n            arr = String(rows[i].row).replace(/\\s/g, '').split(',');\n            // remove empty spaces in a row and cast to an array\n            for (j = arr.length; j--; ) {\n                arr[j] = arr[j] || KEY_NO_OBJECTS;\n            }\n            mapData.objectsMapData[i] = arr;\n        }\n\n        if (!existy(mapData.tiles)) {\n            trace(\"Map-data file warning: No 'tiles' defined.\");\n            mapData.tiles = {};\n        }\n        if (!existy(mapData.objects)) {\n            trace(\"Map-data file warning: No 'objects' defined.\");\n            mapData.objects = {};\n        }\n\n        let obj: IMapDataObject,\n            objId: string,\n            visual: MapDataObjectVisual,\n            visualId: ObjectVisualKey,\n            interactionOffsets: ObjectInfoInteractionOffsets,\n            oTextures: ObjectInfoTextureNames,\n            m: number,\n            n: number;\n        for (objId in mapData.objects) {\n            obj = mapData.objects[objId];\n            if (!existy(obj.visuals)) {\n                throw new Error('TRAVISO: No visuals defined in data-file for object type: ' + objId);\n            }\n            obj.id = objId;\n            if (!existy(obj.rowSpan)) {\n                obj.rowSpan = 1;\n            }\n            if (!existy(obj.columnSpan)) {\n                obj.columnSpan = 1;\n            }\n\n            oTextures = {};\n            interactionOffsets = {};\n\n            for (visualId in obj.visuals) {\n                visual = obj.visuals[visualId];\n\n                if (existy(visual.ipor) && existy(visual.ipoc)) {\n                    interactionOffsets[visualId] = {\n                        c: Number(visual.ipoc),\n                        r: Number(visual.ipor),\n                    };\n                }\n\n                // visual = (visual  as MapDataObjectVisualType1);\n                if (visual.frames && visual.frames.length > 0) {\n                    oTextures[visualId] = [];\n                    for (m = 0; m < visual.frames.length; m++) {\n                        oTextures[visualId][m] = visual.frames[m].path;\n                    }\n                } else {\n                    if (!visual.path || !visual.extension || !visual.numberOfFrames || visual.numberOfFrames < 1) {\n                        throw new Error(\n                            'TRAVISO: Invalid or missing visual attributes detected in data-file for visual with id: ' +\n                                visualId\n                        );\n                    }\n\n                    oTextures[visualId] = [];\n                    if (visual.numberOfFrames === 1) {\n                        oTextures[visualId][0] = visual.path + '.' + visual.extension;\n                    } else {\n                        n = 0;\n                        for (m = visual.startIndex; m < visual.numberOfFrames; m++) {\n                            oTextures[visualId][n++] = visual.path + String(m) + '.' + visual.extension;\n                        }\n                    }\n                }\n            }\n\n            obj.textureNames = oTextures;\n            obj.io = interactionOffsets;\n            obj.f = !!obj.floor;\n            obj.nt = !!obj.noTransparency;\n            obj.m = !!obj.movable;\n            obj.i = !!obj.interactive;\n        }\n\n        delete mapData.objectsMap;\n        delete mapData.groundMap;\n\n        this.mapData = mapData;\n\n        this.onAllAssetsLoaded();\n    }\n\n    /**\n     * This method is being called whenever all the assets are\n     * loaded and engine is ready to initialize.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     */\n    private onAllAssetsLoaded(): void {\n        trace('All assets loaded');\n\n        this.moveEngine = new MoveEngine(this);\n\n        this._currentScale = 1.0;\n        this._currentZoom = 0;\n\n        this._posFrame = this._config.initialPositionFrame || {\n            x: 0,\n            y: 0,\n            w: 800,\n            h: 600,\n        };\n\n        this._externalCenter = {\n            x: this._posFrame.w >> 1,\n            y: this._posFrame.h >> 1,\n        };\n\n        this.createMap();\n\n        this.repositionContent(this._config.initialPositionFrame);\n\n        this.enableInteraction();\n\n        if (this._config.engineInstanceReadyCallback) {\n            this._config.engineInstanceReadyCallback(this);\n        }\n    }\n\n    /**\n     * Creates the map and setups necessary parameters for future map calculations.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     */\n    private createMap(): void {\n        // create background\n        if (this._config.backgroundColor) {\n            this._bg = new Graphics();\n            this.addChild(this._bg);\n        }\n\n        // create mask\n        if (this._config.useMask) {\n            this._mapMask = new Graphics();\n            this.addChild(this._mapMask);\n        }\n\n        // create containers for visual map elements\n        this._mapContainer = new Container();\n        this.addChild(this._mapContainer);\n\n        // Define two layers of maps\n        // One for the world and one for the objects (static/dynamic) over it\n        // This enables us not to update the whole world in every move but instead just update the object depths over it\n\n        this._groundContainer = new Container();\n        this._mapContainer.addChild(this._groundContainer);\n\n        this._objContainer = new Container();\n        this._mapContainer.addChild(this._objContainer);\n\n        const groundMapData = this.mapData.groundMapData;\n        const objectsMapData = this.mapData.objectsMapData;\n\n        const initialControllableLocation = this.mapData.initialControllableLocation;\n\n        // set map size\n        this._mapSizeR = groundMapData.length;\n        this._mapSizeC = groundMapData[0].length;\n\n        // add ground image first if it is defined\n        let groundImageSprite: Sprite;\n        if (this.mapData.singleGroundImage) {\n            groundImageSprite = new Sprite(Texture.from(this.mapData.singleGroundImage.path));\n            this._groundContainer.addChild(groundImageSprite);\n\n            groundImageSprite.scale.set(this.mapData.singleGroundImage.scale || 1);\n        }\n\n        // create arrays to hold tiles and objects\n        this._tileArray = [];\n        this._objArray = [];\n        let i, j;\n        for (i = 0; i < this._mapSizeR; i++) {\n            this._tileArray[i] = [];\n            this._objArray[i] = [];\n            for (j = 0; j < this._mapSizeC; j++) {\n                this._tileArray[i][j] = null;\n                this._objArray[i][j] = null;\n            }\n        }\n\n        // Map data is being sent to path finding and after this point\n        // its content will be different acc to the path-finding algorithm.\n        // It is still being stored in engine.mapData but you must be aware\n        // of the structure if you want to use it after this point.\n        this._pathFinding = new PathFinding(this._mapSizeC, this._mapSizeR, {\n            diagonal: this._config.pathFindingType === PF_ALGORITHMS.ASTAR_DIAGONAL,\n            closest: this._config.pathFindingClosest,\n        });\n\n        let tile;\n        for (i = 0; i < this._mapSizeR; i++) {\n            for (j = this._mapSizeC - 1; j >= 0; j--) {\n                this._tileArray[i][j] = null;\n                if (groundMapData[i][j] && groundMapData[i][j] !== KEY_EMPTY_TILE) {\n                    tile = new TileView(this, groundMapData[i][j]);\n                    tile.position.x = this.getTilePosXFor(i, j);\n                    tile.position.y = this.getTilePosYFor(i, j);\n                    tile.mapPos = { c: j, r: i };\n                    this._tileArray[i][j] = tile;\n                    this._groundContainer.addChild(tile);\n\n                    if (!tile.isMovableTo) {\n                        this._pathFinding.setCell(j, i, 0);\n                    }\n                } else {\n                    this._pathFinding.setCell(j, i, 0);\n                }\n            }\n        }\n\n        let obj,\n            floorObjectFound = false;\n        for (i = 0; i < this._mapSizeR; i++) {\n            for (j = this._mapSizeC - 1; j >= 0; j--) {\n                this._objArray[i][j] = null;\n                if (objectsMapData[i][j] && objectsMapData[i][j] !== KEY_NO_OBJECTS) {\n                    obj = new ObjectView(this, objectsMapData[i][j]);\n                    obj.position.x = this.getTilePosXFor(i, j);\n                    obj.position.y = this.getTilePosYFor(i, j) + this.tileHalfHeight;\n                    obj.mapPos = { c: j, r: i };\n\n                    if (!floorObjectFound && obj.isFloorObject) {\n                        floorObjectFound = true;\n                    }\n\n                    this._objContainer.addChild(obj);\n\n                    this.addObjRefToLocation(obj, obj.mapPos);\n\n                    // if (initialControllableLocation && initialControllableLocation.c === j && initialControllableLocation.r === i)\n                    if (\n                        initialControllableLocation &&\n                        initialControllableLocation.columnIndex === j &&\n                        initialControllableLocation.rowIndex === i\n                    ) {\n                        this._currentControllable = obj;\n                    }\n                }\n            }\n        }\n        if (floorObjectFound) {\n            // run the loop again to bring the other objects on top of the floor objects\n            let a, k;\n            for (i = 0; i < this._mapSizeR; i++) {\n                for (j = this._mapSizeC - 1; j >= 0; j--) {\n                    a = this._objArray[i][j];\n                    if (a) {\n                        for (k = 0; k < a.length; k++) {\n                            if (!a[k].isFloorObject) {\n                                this._objContainer.addChild(a[k]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // cacheAsBitmap: for now this creates problem with tile highlights\n        // this._groundContainer.cacheAsBitmap = true;\n\n        this._mapVertices = [\n            [this.getTilePosXFor(0, 0) - this.tileHalfWidth, this.getTilePosYFor(0, 0)],\n            [\n                this.getTilePosXFor(0, this._mapSizeC - 1),\n                this.getTilePosYFor(0, this._mapSizeC - 1) - this.tileHalfHeight,\n            ],\n            [\n                this.getTilePosXFor(this._mapSizeR - 1, this._mapSizeC - 1) + this.tileHalfWidth,\n                this.getTilePosYFor(this._mapSizeR - 1, this._mapSizeC - 1),\n            ],\n            [\n                this.getTilePosXFor(this._mapSizeR - 1, 0),\n                this.getTilePosYFor(this._mapSizeR - 1, 0) + this.tileHalfHeight,\n            ],\n        ];\n\n        this._mapVisualWidthReal =\n            this.getTilePosXFor(this._mapSizeR - 1, this._mapSizeC - 1) - this.getTilePosXFor(0, 0);\n        this._mapVisualHeightReal =\n            this.getTilePosYFor(this._mapSizeR - 1, 0) - this.getTilePosYFor(0, this._mapSizeC - 1);\n\n        if (groundImageSprite) {\n            groundImageSprite.position.x =\n                this._mapVertices[0][0] + this.tileHalfWidth + (this._mapVisualWidthReal - groundImageSprite.width) / 2;\n            groundImageSprite.position.y =\n                this._mapVertices[1][1] +\n                this.tileHalfHeight +\n                (this._mapVisualHeightReal - groundImageSprite.height) / 2;\n        }\n\n        this.zoomTo(this._config.initialZoomLevel, true);\n\n        if (this._config.followCharacter && initialControllableLocation) {\n            // this.centralizeToLocation(initialControllableLocation.c, initialControllableLocation.r, true);\n            this.centralizeToLocation(\n                initialControllableLocation.columnIndex,\n                initialControllableLocation.rowIndex,\n                true\n            );\n        } else {\n            this.centralizeToCurrentExternalCenter(true);\n        }\n    }\n\n    /**\n     * Calculates 2D X position of a tile, given its column and row indices.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param r {number} row index of the tile\n     * @param c {number} column index of the tile\n     * @return {number} 2D X position of a tile\n     */\n    public getTilePosXFor(r: number, c: number): number {\n        return c * this.tileHalfWidth + r * this.tileHalfWidth;\n    }\n\n    /**\n     * Calculates 2D Y position of a tile, given its column and row indices.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param r {number} row index of the tile\n     * @param c {number} column index of the tile\n     * @return {number} 2D Y position of a tile\n     */\n    public getTilePosYFor(r: number, c: number): number {\n        return r * this.tileHalfHeight - c * this.tileHalfHeight;\n    }\n\n    /**\n     * Shows or hides the display object that includes the objects-layer\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param show {boolean} show the object layer, default `false`\n     */\n    public showHideObjectLayer(show: boolean = false): void {\n        this._objContainer.visible = show;\n    }\n    /**\n     * Shows or hides the display object that includes the ground/terrain layer\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param show {boolean} show the ground layer, default `false`\n     */\n    public showHideGroundLayer(show: boolean = false): void {\n        this._groundContainer.visible = show;\n    }\n    /**\n     * Returns the TileView instance that sits in the location given by row and column indices.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param r {number} row index of the tile\n     * @param c {number} column index of the tile\n     * @return {TileView} the tile in the location given\n     */\n    public getTileAtRowAndColumn(r: number, c: number): TileView {\n        return this._tileArray[r][c];\n    }\n    /**\n     * Returns all the ObjectView instances referenced to the given location with the specified row and column indices.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param r {number} the row index of the map location\n     * @param c {number} the column index of the map location\n     * @return {Array(ObjectView)} an array of map-objects referenced to the given location\n     */\n    public getObjectsAtRowAndColumn(r: number, c: number): ObjectView[] {\n        return this._objArray[r][c];\n    }\n    /**\n     * Returns all the ObjectView instances referenced to the given location.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     * @return {Array(ObjectView)} an array of map-objects referenced to the given location\n     */\n    public getObjectsAtLocation(pos: TColumnRowPair): ObjectView[] {\n        return this._objArray[pos.r][pos.c];\n    }\n\n    /**\n     * Creates and adds a predefined (in json file) map-object to the map using the specified object type-id.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param type {number} type-id of the object as defined in the json file\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     * @return {ObjectView} the newly created map-object\n     */\n    public createAndAddObjectToLocation(type: string, pos: TColumnRowPair): ObjectView {\n        return this.addObjectToLocation(new ObjectView(this, type), pos);\n    }\n    /**\n     * Adds an already-created object to the map.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param obj {ObjectView} a map-object to add to the map and the given location\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     * @return {ObjectView} the newly added object\n     */\n    public addObjectToLocation(obj: ObjectView, pos: TColumnRowPair): ObjectView {\n        obj.position.x = this.getTilePosXFor(pos.r, pos.c);\n        obj.position.y = this.getTilePosYFor(pos.r, pos.c) + this.tileHalfHeight;\n        obj.mapPos = { c: pos.c, r: pos.r };\n\n        this._objContainer.addChild(obj);\n\n        this.addObjRefToLocation(obj, obj.mapPos);\n        this.arrangeDepthsFromLocation(obj.isFloorObject ? { c: this._mapSizeC - 1, r: 0 } : obj.mapPos);\n\n        return obj;\n    }\n\n    /**\n     * Enables adding external custom display objects to the specified location.\n     * This method should be used for the objects that are not already defined in json file and don't have a type-id.\n     * The resulting object will be independent of engine mechanics apart from depth controls.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param displayObject {PIXI.DisplayObject} object to be added to location\n     * @param displayObject.isMovableTo {boolean} if the object can be moved onto by other map-objects, default true\n     * @param displayObject.columnSpan {number} number of tiles that map-object covers horizontally on the isometric map\n     * @param displayObject.rowSpan {number} number of tiles that map-object covers vertically on the isometric map\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     * @return {PIXI.DisplayObject} the newly added object\n     */\n    public addCustomObjectToLocation(displayObject: ObjectView, pos: TColumnRowPair): DisplayObject {\n        displayObject.isMovableTo = existy(displayObject.isMovableTo) ? displayObject.isMovableTo : true;\n        displayObject.columnSpan = displayObject.columnSpan || 1;\n        displayObject.rowSpan = displayObject.rowSpan || 1;\n\n        return this.addObjectToLocation(displayObject, pos);\n\n        // this.removeObjRefFromLocation(displayObject, pos);\n    }\n    /**\n     * Removes the object and its references from the map.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param obj {ObjectView} Either an external display object or a map-object (ObjectView)\n     * @param pos {TColumnRowPair} position object including row and column coordinates. If not defined, the engine will use `obj.mapPos` to remove the map-object\n     */\n    public removeObjectFromLocation(obj: ObjectView, pos: TColumnRowPair): void {\n        pos = pos || obj.mapPos;\n        this._objContainer.removeChild(obj);\n        this.removeObjRefFromLocation(obj, pos);\n    }\n    /**\n     * Centralizes and zooms the EngineView instance to the object specified.\n     *\n     * @method focusMapToObject\n     * @param obj {ObjectView} the object that map will be focused with respect to\n     * @param obj.mapPos {Object} the object that holds the location of the map-object on the map\n     * @param obj.mapPos.c {number} the column index of the map location\n     * @param obj.mapPos.r {number} the row index of the map location\n     * @param obj.columnSpan {number} number of tiles that map-object covers horizontally on the isometric map\n     * @param obj.rowSpan {number} number of tiles that map-object covers vertically on the isometric map\n     */\n    public focusMapToObject(obj: ObjectView): void {\n        this.focusMapToLocation(obj.mapPos.c + (obj.columnSpan - 1) / 2, obj.mapPos.r - (obj.rowSpan - 1) / 2, 0);\n    }\n    /**\n     * Centralizes and zooms the EngineView instance to the map location specified by row and column index.\n     *\n     * @method focusMapToLocation\n     * @param c {number} the column index of the map location\n     * @param r {number} the row index of the map location\n     * @param zoomAmount {number} targeted zoom level for focusing\n     */\n    public focusMapToLocation(c: number, r: number, zoomAmount: number): void {\n        // NOTE: using zoomTo instead of setScale causes centralizeToPoint to be called twice (no visual problem)\n        this.zoomTo(zoomAmount, false);\n        this.centralizeToLocation(c, r, this._config.instantCameraRelocation);\n    }\n    /**\n     * Centralizes the EngineView instance to the object specified.\n     *\n     * @method centralizeToObject\n     * @param obj {ObjectView} the object that map will be centralized with respect to\n     * @param obj.mapPos {Object} the object that holds the location of the map-object on the map\n     * @param obj.mapPos.c {number} the column index of the map location\n     * @param obj.mapPos.r {number} the row index of the map location\n     */\n    public centralizeToObject(obj: ObjectView): void {\n        this.centralizeToLocation(obj.mapPos.c, obj.mapPos.r, this._config.instantCameraRelocation);\n    }\n    /**\n     * Centralizes the EngineView instance to the map location specified by row and column index.\n     *\n     * @method centralizeToLocation\n     * @param c {number} the column index of the map location\n     * @param r {number} the row index of the map location\n     * @param [instantRelocate=false] {boolean} specifies if the camera move will be animated or instant\n     */\n    public centralizeToLocation(c: number, r: number, instantRelocate: boolean): void {\n        this._currentFocusLocation = { c: c, r: r };\n        const px =\n            this._externalCenter.x + (this._mapVisualWidthScaled >> 1) - this.getTilePosXFor(r, c) * this._currentScale;\n        const py = this._externalCenter.y - this.getTilePosYFor(r, c) * this._currentScale;\n        this.centralizeToPoint(px, py, instantRelocate);\n    }\n    /**\n     * Centralizes the EngineView instance to the current location of the attention/focus.\n     *\n     * @method centralizeToCurrentFocusLocation\n     * @param [instantRelocate=false] {boolean} specifies if the camera move will be animated or instant\n     */\n    public centralizeToCurrentFocusLocation(instantRelocate: boolean): void {\n        this.centralizeToLocation(this._currentFocusLocation.c, this._currentFocusLocation.r, instantRelocate);\n    }\n    /**\n     * External center is the central point of the frame defined by the user to be used as the visual size of the engine.\n     * This method centralizes the EngineView instance with respect to this external center-point.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param instantRelocate {boolean} specifies if the camera move will be animated or instant\n     */\n    public centralizeToCurrentExternalCenter(instantRelocate: boolean): void {\n        if (this._externalCenter) {\n            this._currentFocusLocation = {\n                c: this._mapSizeC >> 1,\n                r: this._mapSizeR >> 1,\n            };\n            this.centralizeToPoint(this._externalCenter.x, this._externalCenter.y, instantRelocate);\n        }\n    }\n    /**\n     * Centralizes the EngineView instance to the points specified.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param px {number} the x coordinate of the center point with respect to EngineView frame\n     * @param py {number} the y coordinate of the center point with respect to EngineView frame\n     * @param instantRelocate {boolean} specifies if the relocation will be animated or instant\n     */\n    public centralizeToPoint(px: number, py: number, instantRelocate: boolean): void {\n        if (this._tileArray) {\n            px = px - (this._mapVisualWidthScaled >> 1);\n            if (\n                (existy(instantRelocate) && instantRelocate) ||\n                (!existy(instantRelocate) && this._config.instantCameraRelocation)\n            ) {\n                this._mapContainer.position.x = px;\n                this._mapContainer.position.y = py;\n            } else {\n                this.moveEngine.addTween(\n                    this._mapContainer.position as unknown as ITweenTarget,\n                    0.5,\n                    { x: px, y: py },\n                    0,\n                    'easeInOut',\n                    true\n                );\n            }\n        }\n    }\n    /**\n     * Sets all the parameters related to zooming in and out.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param minScale {number} minimum scale that the PIXI.Container for the map can get, default 0.5\n     * @param maxScale {number} maximum scale that the PIXI.Container for the map can get, default 1.5\n     * @param numberOfZoomLevels {number} used to calculate zoom increment, defined by user, default 5\n     * @param initialZoomLevel {number} initial zoom level of the map, default 0\n     * @param instantCameraZoom {boolean} specifies whether to zoom instantly or with a tween animation, default false\n     */\n    public setZoomParameters(\n        minScale: number = 0.5,\n        maxScale: number = 1.5,\n        numberOfZoomLevels: number = 5,\n        initialZoomLevel: number = 0,\n        instantCameraZoom: boolean = false\n    ): void {\n        this._config.minScale = minScale;\n        this._config.maxScale = maxScale;\n        this._config.minZoom = -1;\n        this._config.maxZoom = 1;\n        this._config.zoomIncrement = existy(numberOfZoomLevels)\n            ? numberOfZoomLevels <= 1\n                ? 0\n                : 2 / (numberOfZoomLevels - 1)\n            : 0.5;\n\n        this._config.initialZoomLevel = initialZoomLevel;\n        this._config.instantCameraZoom = instantCameraZoom;\n    }\n    /**\n     * Sets map's scale.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param s {number} Scale amount for both x and y coordinates\n     * @param instantZoom {boolean} Specifies if the scaling will be animated or instant\n     */\n    private setScale(s: number, instantZoom: boolean): void {\n        if (s < this._config.minScale) {\n            s = this._config.minScale;\n        } else if (s > this._config.maxScale) {\n            s = this._config.maxScale;\n        }\n        this._currentScale = s;\n        this._mapVisualWidthScaled = this._mapVisualWidthReal * this._currentScale;\n        // this.mapVisualHeightScaled = this._mapVisualHeightReal * this._currentScale;\n\n        if ((existy(instantZoom) && instantZoom) || (!existy(instantZoom) && this._config.instantCameraZoom)) {\n            this._mapContainer.scale.set(this._currentScale);\n        } else {\n            this.moveEngine.addTween(\n                this._mapContainer.scale as unknown as ITweenTarget,\n                0.5,\n                { x: this._currentScale, y: this._currentScale },\n                0,\n                'easeInOut',\n                true\n            );\n        }\n    }\n    /**\n     * Zooms camera by to the amount given.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param zoomAmount {number} specifies zoom amount (between -1 and 1). Use -1, -0.5, 0, 0,5, 1 for better results.\n     * @param instantZoom {boolean} specifies whether to zoom instantly or with a tween animation\n     */\n    public zoomTo(zoomAmount: number, instantZoom: boolean): void {\n        zoomAmount = zoomAmount || 0;\n        let s = mathMap(\n            zoomAmount,\n            this._config.minZoom,\n            this._config.maxZoom,\n            this._config.minScale,\n            this._config.maxScale,\n            true\n        );\n        s = Math.round(s * 10) / 10;\n\n        this._currentZoom = mathMap(\n            s,\n            this._config.minScale,\n            this._config.maxScale,\n            this._config.minZoom,\n            this._config.maxZoom,\n            true\n        );\n\n        this._externalCenter = this._externalCenter\n            ? this._externalCenter\n            : { x: this._mapVisualWidthScaled >> 1, y: 0 };\n        const diff = {\n            x: this._mapContainer.position.x + (this._mapVisualWidthScaled >> 1) - this._externalCenter.x,\n            y: this._mapContainer.position.y - this._externalCenter.y,\n        };\n        const oldScale = this._currentScale;\n\n        this.setScale(s, instantZoom);\n\n        const ratio = this._currentScale / oldScale;\n        this.centralizeToPoint(\n            this._externalCenter.x + diff.x * ratio,\n            this._externalCenter.y + diff.y * ratio,\n            (existy(instantZoom) && instantZoom) || (!existy(instantZoom) && this._config.instantCameraZoom)\n        );\n\n        // trace(\"scalingTo: \" + this._currentScale);\n        // trace(\"zoomingTo: \" + this._currentZoom);\n    }\n    /**\n     * Zooms the camera one level out.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param instantZoom {boolean} Specifies whether to zoom instantly or with a tween animation\n     */\n    public zoomOut(instantZoom: boolean): void {\n        this.zoomTo(this._currentZoom - this._config.zoomIncrement, instantZoom);\n    }\n    /**\n     * Zooms the camera one level in.\n     *\n     * @method zoomIn\n     * @param [instantZoom=false] {boolean} specifies whether to zoom instantly or with a tween animation\n     */\n    public zoomIn(instantZoom: boolean): void {\n        this.zoomTo(this._currentZoom + this._config.zoomIncrement, instantZoom);\n    }\n    /**\n     * Returns the current controllable map-object.\n     *\n     * @method getCurrentControllable\n     * @return {ObjectView} current controllable map-object\n     */\n    public getCurrentControllable(): ObjectView {\n        return this._currentControllable;\n    }\n    /**\n     * Sets a map-object as the current controllable. This object will be moving in further relevant user interactions.\n     *\n     * @method setCurrentControllable\n     * @param obj {ObjectView} object to be set as current controllable\n     * @param obj.mapPos {Object} object including r and c coordinates\n     * @param obj.mapPos.c {number} the column index of the map location\n     * @param obj.mapPos.r {number} the row index of the map location\n     */\n    public setCurrentControllable(obj: ObjectView): void {\n        this._currentControllable = obj;\n    }\n    /**\n     * Adds a reference of the given map-object to the given location in the object array.\n     * This should be called when an object moved or transferred to the corresponding location.\n     * Uses objects size property to add its reference to all relevant cells.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {ObjectView} object to be bind to location\n     * @param obj.columnSpan {number} number of tiles that map-object covers horizontally on the isometric map\n     * @param obj.rowSpan {number} number of tiles that map-object covers vertically on the isometric map\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     */\n    private addObjRefToLocation(obj: ObjectView, pos: TColumnRowPair): void {\n        let k, m;\n        for (k = pos.c; k < pos.c + obj.columnSpan; k++) {\n            for (m = pos.r; m > pos.r - obj.rowSpan; m--) {\n                this.addObjRefToSingleLocation(obj, { c: k, r: m });\n            }\n        }\n    }\n    /**\n     * Adds a reference of the given map-object to the given location in the object array.\n     * Updates the cell as movable or not according to the object being movable onto or not.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {ObjectView} object to be bind to location\n     * @param obj.isMovableTo {boolean} is the object is movable onto by the other objects or not\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     */\n    private addObjRefToSingleLocation(obj: ObjectView, pos: TColumnRowPair): void {\n        if (!this._objArray[pos.r][pos.c]) {\n            this._objArray[pos.r][pos.c] = [];\n        }\n        const index = this._objArray[pos.r][pos.c].indexOf(obj);\n        if (index < 0) {\n            this._objArray[pos.r][pos.c].push(obj);\n        }\n\n        if (!obj.isMovableTo) {\n            this._pathFinding.setDynamicCell(pos.c, pos.r, 0);\n        }\n    }\n    /**\n     * Removes references of the given map-object from the given location in the object array.\n     * This should be called when an object moved or transferred from the corresponding location.\n     * Uses objects size property to remove its references from all relevant cells.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {ObjectView} object to be bind to location\n     * @param obj.columnSpan {number} number of tiles that map-object covers horizontally on the isometric map\n     * @param obj.rowSpan {number} number of tiles that map-object covers vertically on the isometric map\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     */\n    private removeObjRefFromLocation(obj: ObjectView, pos: TColumnRowPair): void {\n        let k, m;\n        for (k = pos.c; k < pos.c + obj.columnSpan; k++) {\n            for (m = pos.r; m > pos.r - obj.rowSpan; m--) {\n                this.removeObjRefFromSingleLocation(obj, { c: k, r: m });\n            }\n        }\n    }\n    /**\n     * Removes a reference of the given map-object from the given location in the object array.\n     * Updates the cell as movable or not according to the other object references in the same cell.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {ObjectView} object to be bind to location\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     */\n    private removeObjRefFromSingleLocation(obj: ObjectView, pos: TColumnRowPair): void {\n        if (this._objArray[pos.r][pos.c]) {\n            const index = this._objArray[pos.r][pos.c].indexOf(obj);\n            if (index > -1) {\n                this._objArray[pos.r][pos.c].splice(index, 1);\n            }\n            if (this._objArray[pos.r][pos.c].length === 0) {\n                this._pathFinding.setDynamicCell(pos.c, pos.r, 1);\n                this._objArray[pos.r][pos.c] = null;\n            } else {\n                const a = this._objArray[pos.r][pos.c];\n                const l = a.length;\n                for (let i = 0; i < l; i++) {\n                    if (!a[i].isMovableTo) {\n                        this._pathFinding.setDynamicCell(pos.c, pos.r, 0);\n                        break;\n                    } else if (i === l - 1) {\n                        this._pathFinding.setDynamicCell(pos.c, pos.r, 1);\n                    }\n                }\n            }\n        }\n    }\n    // /**\n    //  * Removes all map-object references from the given location in the object array.\n    //  *\n    //  * @private\n    //  * @method removeAllObjectRefsFromLocation\n    //  * @param {TColumnRowPair} pos object including r and c coordinates\n    //  */\n    // private removeAllObjectRefsFromLocation(pos: TColumnRowPair): void {\n    //     if (this._objArray[pos.r][pos.c]) {\n    //         this._pathFinding.setDynamicCell(pos.c, pos.r, 1);\n    //         this._objArray[pos.r][pos.c] = null;\n    //     }\n    // }\n    /**\n     * Sets alphas of the map-objects referenced to the given location.\n     *\n     * @method changeObjAlphasInLocation\n     * @param value {number} alpha value, should be between 0 and 1\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     */\n    public changeObjAlphasInLocation(value: number, pos: TColumnRowPair): void {\n        const a = this._objArray[pos.r][pos.c];\n        if (a) {\n            const l = a.length;\n            for (let i = 0; i < l; i++) {\n                if (!a[i].isFloorObject && !a[i].noTransparency) {\n                    a[i].alpha = value;\n                }\n            }\n        }\n    }\n    /**\n     * Sets a map-object's location and logically moves it to the new location.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {ObjectView} map-object to be moved\n     * @param obj.mapPos {Object} object including r and c coordinates\n     * @param obj.mapPos.c {number} the column index of the map location\n     * @param obj.mapPos.r {number} the row index of the map location\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     */\n    private arrangeObjLocation(obj: ObjectView, pos: TColumnRowPair): void {\n        this.removeObjRefFromLocation(obj, obj.mapPos);\n        this.addObjRefToLocation(obj, pos);\n\n        obj.mapPos = { c: pos.c, r: pos.r };\n    }\n    /**\n     * Sets occlusion transparencies according to given map-object's location.\n     * This method only works for user-controllable object.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {ObjectView} current controllable map-object\n     * @param prevPos {TColumnRowPair} previous location of the map-object in terms of row and column coordinates\n     * @param pos {TColumnRowPair} new location of the map-object in terms of row and column coordinates\n     */\n    private arrangeObjTransparencies(obj: ObjectView, prevPos: TColumnRowPair, pos: TColumnRowPair): void {\n        if (this._config.changeTransparencies) {\n            if (this._currentControllable === obj) {\n                if (prevPos.c > 0) {\n                    this.changeObjAlphasInLocation(1, {\n                        c: prevPos.c - 1,\n                        r: prevPos.r,\n                    });\n                }\n                if (prevPos.c > 0 && prevPos.r < this._mapSizeR - 1) {\n                    this.changeObjAlphasInLocation(1, {\n                        c: prevPos.c - 1,\n                        r: prevPos.r + 1,\n                    });\n                }\n                if (prevPos.r < this._mapSizeR - 1) {\n                    this.changeObjAlphasInLocation(1, {\n                        c: prevPos.c,\n                        r: prevPos.r + 1,\n                    });\n                }\n\n                if (pos.c > 0) {\n                    this.changeObjAlphasInLocation(0.7, {\n                        c: pos.c - 1,\n                        r: pos.r,\n                    });\n                }\n                if (pos.c > 0 && pos.r < this._mapSizeR - 1) {\n                    this.changeObjAlphasInLocation(0.7, {\n                        c: pos.c - 1,\n                        r: pos.r + 1,\n                    });\n                }\n                if (pos.r < this._mapSizeR - 1) {\n                    this.changeObjAlphasInLocation(0.7, {\n                        c: pos.c,\n                        r: pos.r + 1,\n                    });\n                }\n            }\n\n            // TODO: check if there is a way not to update main character alpha each time\n            obj.alpha = 1;\n        }\n    }\n    /**\n     * Arranges depths (z-index) of the map-objects starting from the given location.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     */\n    private arrangeDepthsFromLocation(pos: TColumnRowPair): void {\n        let a, i, j, k;\n        for (i = pos.r; i < this._mapSizeR; i++) {\n            for (j = pos.c; j >= 0; j--) {\n                a = this._objArray[i][j];\n                if (a) {\n                    for (k = 0; k < a.length; k++) {\n                        if (!a[k].isFloorObject) {\n                            this._objContainer.addChild(a[k]);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Clears the highlight for the old path and highlights the new path on map.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param currentPath {Array(GridNode)} the old path to clear the highlight from\n     * @param newPath {Array(GridNode)} the new path to highlight\n     */\n    private arrangePathHighlight(currentPath: GridNode[], newPath: GridNode[]): void {\n        let i: number, tile: TileView, pathItem: GridNode;\n        if (currentPath) {\n            for (i = 0; i < currentPath.length; i++) {\n                pathItem = currentPath[i];\n                if (!newPath || newPath.indexOf(pathItem) === -1) {\n                    tile = this._tileArray[pathItem.mapPos.r][pathItem.mapPos.c];\n                    tile.setHighlighted(false, !this._config.tileHighlightAnimated);\n                }\n            }\n        }\n        if (newPath) {\n            for (i = 0; i < newPath.length; i++) {\n                pathItem = newPath[i];\n                if (!currentPath || currentPath.indexOf(pathItem) === -1) {\n                    tile = this._tileArray[pathItem.mapPos.r][pathItem.mapPos.c];\n                    tile.setHighlighted(true, !this._config.tileHighlightAnimated);\n                }\n            }\n        }\n    }\n    /**\n     * Stops a moving object.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {IMovable} map-object to be moved on path\n     */\n    private stopObject(obj: IMovable): void {\n        obj.currentPath = null;\n        obj.currentTarget = null;\n        obj.currentTargetTile = null;\n        this.moveEngine.removeMovable(obj);\n    }\n    /**\n     * Moves the specified map-object through a path.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {IMovable} map-object to be moved on path\n     * @param path {Array(GridNode)} path to move object on\n     * @param speed {number} speed of the map-object to be used during movement, if not defined it uses previous speed or the MoveEngine's default speed, default null\n     */\n    private moveObjThrough(obj: IMovable, path: GridNode[], speed: number = null): void {\n        if (this._config.instantObjectRelocation) {\n            const tile = this._tileArray[path[0].mapPos.r][path[0].mapPos.c];\n            obj.position.x = tile.position.x;\n            obj.position.y = tile.position.y + this.tileHalfHeight;\n            this.arrangeObjTransparencies(obj, obj.mapPos, tile.mapPos);\n            this.arrangeObjLocation(obj, tile.mapPos);\n            this.arrangeDepthsFromLocation(tile.mapPos);\n        } else {\n            if (this._config.highlightPath && this._currentControllable === obj) {\n                this.arrangePathHighlight(obj.currentPath, path);\n            }\n\n            if (obj.currentTarget) {\n                // trace(\"Object has a target, update the path with the new one\");\n                // this.moveEngine.addNewPathToObject(obj, path, speed);\n                this.stopObject(obj);\n            }\n\n            this.moveEngine.prepareForMove(obj, path, speed);\n\n            obj.currentTargetTile = obj.currentPath[obj.currentPathStep];\n\n            this.onObjMoveStepBegin(obj, obj.currentPath[obj.currentPathStep].mapPos);\n        }\n    }\n    /**\n     * Sets up the engine at the beginning of each tile change move for the specified object\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param obj {IMovable} map-object that is being moved\n     * @param pos {TColumnRowPair} position object including row and column coordinates\n     * @return {boolean} if the target tile was available and map-object has moved\n     */\n    private onObjMoveStepBegin(obj: IMovable, pos: TColumnRowPair): boolean {\n        // trace(\"onObjMoveStepBegin\");\n        // Note that mapPos is being updated prior to movement\n\n        obj.currentDirection = getDirBetween(obj.mapPos.r, obj.mapPos.c, pos.r, pos.c);\n\n        obj.changeVisualToDirection(obj.currentDirection, true);\n\n        // check if the next target pos is still empty\n        if (!this._pathFinding.isCellFilled(pos.c, pos.r)) {\n            // pos is movable\n            // this.arrangeObjTransparencies(obj, obj.mapPos, pos);\n            // this.arrangeObjLocation(obj, pos);\n            // this.arrangeDepthsFromLocation(obj.mapPos);\n\n            // if there is other object(s) on the target tile, notify the game\n            // const objects = this.getObjectsAtLocation(pos);\n            // if (objects && objects.length > 1)\n            // {\n            // if (this._config.otherObjectsOnTheNextTileCallback) { this._config.otherObjectsOnTheNextTileCallback( obj, objects ); }\n            // }\n\n            this.moveEngine.setMoveParameters(obj, pos);\n\n            this.moveEngine.addMovable(obj);\n\n            return true;\n        } else {\n            // pos is NOT movable\n            this.moveEngine.removeMovable(obj);\n            this.checkAndMoveObjectToLocation(obj, obj.currentPath[0].mapPos);\n\n            return false;\n        }\n    }\n    /**\n     * Sets up the engine at the end of each tile change move for the specified object\n     *\n     * @method\n     * @function\n     * @public\n     * @internal\n     *\n     * @param obj {IMovable} map-object that is being moved\n     */\n    public onObjMoveStepEnd(obj: IMovable): void {\n        //trace(\"onObjMoveStepEnd\");\n\n        obj.currentPathStep--;\n        obj.currentTarget = null;\n        obj.currentTargetTile = null;\n        const pathEnded = 0 > obj.currentPathStep;\n        this.moveEngine.removeMovable(obj);\n\n        if (!pathEnded) {\n            if (this._config.checkPathOnEachTile) {\n                this.checkAndMoveObjectToLocation(obj, obj.currentPath[0].mapPos);\n            } else {\n                obj.currentPath.splice(obj.currentPath.length - 1, 1);\n                this.moveObjThrough(obj, obj.currentPath);\n            }\n        } else {\n            // reached to the end of the path\n            obj.changeVisualToDirection(obj.currentDirection, false);\n        }\n\n        if (this._currentControllable === obj) {\n            const tile = this._tileArray[obj.mapPos.r][obj.mapPos.c];\n            tile.setHighlighted(false, !this._config.tileHighlightAnimated);\n\n            // if (this._config.followCharacter) { this.centralizeToLocation(obj.mapPos.c, obj.mapPos.r); }\n        }\n\n        if (pathEnded && this._config.objectReachedDestinationCallback) {\n            this._config.objectReachedDestinationCallback(obj);\n        }\n    }\n\n    /**\n     * Checks and follows a character\n     *\n     * @method\n     * @function\n     * @public\n     * @internal\n     *\n     * @param obj {IMovable} map-object to check if it is being followed\n     */\n    public checkForFollowCharacter(obj: IMovable): void {\n        if (this._config.followCharacter && this._currentControllable === obj) {\n            this._currentFocusLocation = { c: obj.mapPos.c, r: obj.mapPos.r };\n            const px = this._externalCenter.x - obj.position.x * this._currentScale;\n            const py = this._externalCenter.y - obj.position.y * this._currentScale;\n            // this.centralizeToPoint(px, py, true);\n            this.moveEngine.addTween(\n                this._mapContainer.position as unknown as ITweenTarget,\n                0.1,\n                { x: px, y: py },\n                0,\n                'easeOut',\n                true\n            );\n        }\n    }\n\n    /**\n     * Checks if a map-object changes the tile it is on.\n     *\n     * @method\n     * @function\n     * @public\n     * @internal\n     *\n     * @param obj {IMovable} map-object to be checked\n     */\n    public checkForTileChange(obj: IMovable): void {\n        if (this._config.objectUpdateCallback) {\n            this._config.objectUpdateCallback(obj);\n        }\n\n        const pos = { x: obj.position.x, y: obj.position.y - this.tileHalfHeight };\n        // const tile = this._tileArray[obj.mapPos.r][obj.mapPos.c];\n        const tile = this._tileArray[obj.currentTargetTile.mapPos.r][obj.currentTargetTile.mapPos.c];\n        // move positions to parent scale\n        const vertices = [];\n        for (let i = 0; i < tile.vertices.length; i++) {\n            vertices[i] = [tile.vertices[i][0] + tile.position.x, tile.vertices[i][1] + tile.position.y];\n        }\n\n        if (obj.currentTargetTile.mapPos.r !== obj.mapPos.r || obj.currentTargetTile.mapPos.c !== obj.mapPos.c) {\n            if (isInPolygon(pos, vertices)) {\n                this.arrangeObjTransparencies(obj, obj.mapPos, obj.currentTargetTile.mapPos);\n                this.arrangeObjLocation(obj, obj.currentTargetTile.mapPos);\n                this.arrangeDepthsFromLocation(obj.mapPos);\n\n                // if there is other object(s) on the target tile, notify the game\n                const objects = this.getObjectsAtLocation(obj.currentTargetTile.mapPos);\n                if (objects && objects.length > 1) {\n                    if (this._config.otherObjectsOnTheNextTileCallback) {\n                        this._config.otherObjectsOnTheNextTileCallback(obj, objects);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Searches and returns a path between two locations if there is one.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param from {TColumnRowPair} object including row and column coordinates of the source location\n     * @param to {TColumnRowPair} object including row and column coordinates of the target location\n     *\n     * @return {Array(Object)} an array of path items defining the path\n     */\n    public getPath(from: TColumnRowPair, to: TColumnRowPair): GridNode[] {\n        if (this._pathFinding) {\n            return this._pathFinding.solve(from.c, from.r, to.c, to.r);\n        } else {\n            throw new Error(\"Path finding hasn't been initialized yet!\");\n        }\n    }\n    /**\n     * Checks for a path and moves the map-object on map if there is an available path\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param obj {ObjectView} map-object that is being moved\n     * @param tile {TileView} target map-tile or any custom object that has 'mapPos' and 'isMovableTo' defined\n     * @param speed {number} speed of the map-object to be used during movement, if not defined it uses previous speed or the MoveEngine's default speed, default null\n     * @return {boolean} if there is an available path to move to the target tile\n     */\n    public checkAndMoveObjectToTile(obj: ObjectView, tile: TileView, speed: number = null): boolean {\n        if (tile.isMovableTo) {\n            return this.checkAndMoveObjectToLocation(obj, tile.mapPos, speed);\n        }\n        return false;\n    }\n    /**\n     * Checks for a path and moves the map-object on map if there is an available path\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param obj {ObjectView} map-object that is being moved\n     * @param pos {TColumnRowPair} object including row and column coordinates for the target location\n     * @param speed {number} speed of the map-object to be used during movement, if not defined it uses previous speed or the MoveEngine's default speed, default null\n     * @return {boolean} if there is an available path to move to the target tile\n     */\n    public checkAndMoveObjectToLocation(obj: ObjectView, pos: TColumnRowPair, speed: number = null): boolean {\n        const path = this.getPath(obj.mapPos, pos);\n        if (path) {\n            // begin moving process\n            this.moveObjThrough(obj as IMovable, path, speed);\n\n            return path.length > 0;\n        }\n        return false;\n    }\n    /**\n     * Moves the current controllable map-object to a location if available.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param pos {TColumnRowPair} object including row and column coordinates for the target location\n     * @param speed {number} speed of the map-object to be used during movement, if not defined it uses previous speed or the MoveEngine's default speed, default null\n     * @return {boolean} if there is an available path to move to the target tile\n     */\n    public moveCurrentControllableToLocation(pos: TColumnRowPair, speed: number = null): boolean {\n        if (!this._currentControllable) {\n            throw new Error('TRAVISO: _currentControllable is not defined!');\n        }\n        return this.checkAndMoveObjectToLocation(this._currentControllable, pos, speed);\n    }\n    /**\n     * Moves the current controllable map-object to one of the adjacent available tiles of the map-object specified.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param obj {ObjectView} target map-object\n     * @param speed {number} speed of the map-object to be used during movement, if not defined it uses previous speed or the MoveEngine's default speed, default null\n     * @return {boolean} if there is an available path to move to the target map-object\n     */\n    public moveCurrentControllableToObj(obj: ObjectView, speed: number = null): boolean {\n        if (!this._currentControllable) {\n            throw new Error('TRAVISO: _currentControllable is not defined!');\n        }\n        // check if there is a preferred interaction point\n        if (obj.currentInteractionOffset) {\n            const targetPos = {\n                c: obj.mapPos.c + obj.currentInteractionOffset.c,\n                r: obj.mapPos.r + obj.currentInteractionOffset.r,\n            };\n            if (this.checkAndMoveObjectToLocation(this._currentControllable, targetPos, speed)) {\n                return true;\n            }\n        }\n        const cellArray = this._pathFinding.getAdjacentOpenCells(\n            obj.mapPos.c,\n            obj.mapPos.r,\n            obj.columnSpan,\n            obj.rowSpan\n        );\n        let tile: TileView;\n        let minLength = 3000;\n        let path, minPath, tempFlagHolder;\n        for (let i = 0; i < cellArray.length; i++) {\n            tile = this._tileArray[cellArray[i].mapPos.r][cellArray[i].mapPos.c];\n            if (tile) {\n                if (\n                    tile.mapPos.c === this._currentControllable.mapPos.c &&\n                    tile.mapPos.r === this._currentControllable.mapPos.r\n                ) {\n                    // already next to the object, do nothing\n                    this.arrangePathHighlight((this._currentControllable as IMovable).currentPath, null);\n                    this.stopObject(this._currentControllable as IMovable);\n                    tempFlagHolder = this._config.instantObjectRelocation;\n                    this._config.instantObjectRelocation = true;\n                    this.moveObjThrough(this._currentControllable as IMovable, [\n                        new GridNode(tile.mapPos.c, tile.mapPos.r, 1),\n                    ]);\n                    this._config.instantObjectRelocation = tempFlagHolder;\n                    this._currentControllable.changeVisualToDirection(\n                        this._currentControllable.currentDirection,\n                        false\n                    );\n                    if (this._config.objectReachedDestinationCallback) {\n                        this._config.objectReachedDestinationCallback(this._currentControllable);\n                    }\n                    return true;\n                }\n                path = this.getPath(this._currentControllable.mapPos, tile.mapPos);\n                if (path && path.length < minLength) {\n                    minLength = path.length;\n                    minPath = path;\n                }\n            }\n        }\n\n        if (minPath) {\n            this.moveObjThrough(this._currentControllable as IMovable, minPath, speed);\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Finds the nearest tile to the point given in the map's local scope.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param lp {TPositionPair} Point to check\n     * @return {TileView} The nearest map-tile if there is one. Otherwise `null`\n     */\n    public getTileFromLocalPos(lp: TPositionPair): TileView {\n        let closestTile: TileView = null;\n        if (isInPolygon(lp, this._mapVertices)) {\n            // Using nearest point instead of checking polygon vertices for each tile. Should be faster...\n            // NOTE: there is an ignored bug (for better performance) that tile is not selected when u click on the far corner\n            const thresh = this.tileHalfWidth / 2;\n            let tile, i, j, dist;\n            let closestDist = 3000;\n            for (i = 0; i < this._mapSizeR; i++) {\n                for (j = 0; j < this._mapSizeC; j++) {\n                    tile = this._tileArray[i][j];\n                    if (tile) {\n                        dist = getDist(lp, tile.position);\n                        if (dist < closestDist) {\n                            closestDist = dist;\n                            closestTile = tile;\n                            if (dist < thresh) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return closestTile;\n    }\n    /**\n     * Checks if an interaction occurs using the interaction data coming from PIXI.\n     * If there is any interaction starts necessary movements or performs necessary callbacks.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param interactionData {PIXI.InteractionData} interaction data coming from PIXI\n     */\n    private checkForTileClick(interactionData: InteractionData): void {\n        const lp = this._mapContainer.toLocal(interactionData.global);\n        const closestTile = this.getTileFromLocalPos(lp);\n        if (closestTile) {\n            const a = this._objArray[closestTile.mapPos.r][closestTile.mapPos.c];\n            if (a) {\n                for (let k = 0; k < a.length; k++) {\n                    if (a[k].isInteractive) {\n                        if (this._config.objectSelectCallback) {\n                            this._config.objectSelectCallback(a[k]);\n                        }\n                        break;\n                    }\n                    // TODO CHECK: this might cause issues when there is one movable and one not movable object on the same tile\n                    else if (a[k].isMovableTo) {\n                        if (\n                            this._config.dontAutoMoveToTile ||\n                            !this._currentControllable ||\n                            this.checkAndMoveObjectToTile(this._currentControllable, closestTile)\n                        ) {\n                            if (this._config.highlightTargetTile) {\n                                closestTile.setHighlighted(true, !this._config.tileHighlightAnimated);\n                            }\n                            if (this._config.tileSelectCallback) {\n                                this._config.tileSelectCallback(closestTile.mapPos.r, closestTile.mapPos.c);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } else if (\n                this._config.dontAutoMoveToTile ||\n                !this._currentControllable ||\n                this.checkAndMoveObjectToTile(this._currentControllable, closestTile)\n            ) {\n                if (this._config.highlightTargetTile) {\n                    closestTile.setHighlighted(true, !this._config.tileHighlightAnimated);\n                }\n                if (this._config.tileSelectCallback) {\n                    this._config.tileSelectCallback(closestTile.mapPos.r, closestTile.mapPos.c);\n                }\n            }\n        }\n    }\n    /**\n     * Enables mouse/touch interactions.\n     *\n     * @method\n     * @function\n     * @public\n     */\n    public enableInteraction(): void {\n        // this.mousedown = this.touchstart = this.onMouseDown.bind(this);\n        // this.mousemove = this.touchmove = this.onMouseMove.bind(this);\n        // this.mouseup = this.mouseupout = this.touchend = this.onMouseUp.bind(this);\n        this.on('pointerdown', this.onMouseDown_binded)\n            .on('pointerup', this.onMouseUp_binded)\n            // .on('pointerout', this.onMouseUp_binded)\n            .on('pointerupoutside', this.onMouseUp_binded)\n            .on('pointermove', this.onMouseMove_binded);\n        this.interactive = true;\n    }\n    /**\n     * Disables mouse/touch interactions.\n     *\n     * @method\n     * @function\n     * @public\n     */\n    public disableInteraction(): void {\n        // this.mousedown = this.touchstart = null;\n        // this.mousemove = this.touchmove = null;\n        // this.mouseup = this.mouseupout = this.touchend = null;\n        this.off('pointerdown', this.onMouseDown_binded)\n            .off('pointerup', this.onMouseUp_binded)\n            // .off('pointerout', this.onMouseUp_binded)\n            .off('pointerupoutside', this.onMouseUp_binded)\n            .off('pointermove', this.onMouseMove_binded);\n        this.interactive = true;\n        this._dragging = false;\n    }\n    /**\n     * Checks if the given point is inside the masked area if there is a mask defined.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param p {TPositionPair} point to check\n     * @return {boolean} if the point is inside the masked area\n     */\n    private isInteractionInMask(p: TPositionPair): boolean {\n        if (this._config.useMask) {\n            if (\n                p.x < this._posFrame.x ||\n                p.y < this._posFrame.y ||\n                p.x > this._posFrame.x + this._posFrame.w ||\n                p.y > this._posFrame.y + this._posFrame.h\n            ) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // ******************** START: MOUSE INTERACTIONS **************************** //\n    /**\n     * Handler function for mouse-down event.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param event {InteractionEvent} interaction event object\n     */\n    private onMouseDown(event: InteractionEvent): void {\n        const globalPos = event.data.global;\n        if (!this._dragging && this.isInteractionInMask(globalPos)) {\n            this._dragging = true;\n            //this.mouseDownTime = new Date();\n            this._dragInitStartingX = this._dragPrevStartingX = globalPos.x;\n            this._dragInitStartingY = this._dragPrevStartingY = globalPos.y;\n        }\n    }\n    /**\n     * Handler function for mouse-move event.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param event {InteractionEvent} interaction event object\n     */\n    private onMouseMove(event: InteractionEvent): void {\n        if (this._dragging && this._config.mapDraggable) {\n            const globalPos = event.data.global;\n            this._mapContainer.position.x += globalPos.x - this._dragPrevStartingX;\n            this._mapContainer.position.y += globalPos.y - this._dragPrevStartingY;\n            this._dragPrevStartingX = globalPos.x;\n            this._dragPrevStartingY = globalPos.y;\n        }\n    }\n    /**\n     * Handler function for mouse-up event.\n     *\n     * @method\n     * @function\n     * @private\n     * @internal\n     *\n     * @param event {InteractionEvent} interaction event object\n     */\n    private onMouseUp(event: InteractionEvent): void {\n        if (this._dragging) {\n            this._dragging = false;\n            //const passedTime = (new Date()) - this.mouseDownTime;\n            const distX = event.data.global.x - this._dragInitStartingX;\n            const distY = event.data.global.y - this._dragInitStartingY;\n\n            if (Math.abs(distX) < 5 && Math.abs(distY) < 5) {\n                // NOT DRAGGING IT IS A CLICK\n                this.checkForTileClick(event.data);\n            }\n        }\n    }\n    // ********************* END: MOUSE INTERACTIONS **************************** //\n    /**\n     * Repositions the content according to user settings. Call this method\n     * whenever you want to change the size or position of the engine.\n     *\n     * @method\n     * @function\n     * @public\n     *\n     * @param posFrame {TPositionFrame} frame to position the engine, default is the previously set posFrame and if not set, it is `{ x : 0, y : 0, w : 800, h : 600 }`\n     */\n    public repositionContent(posFrame: TPositionFrame = null): void {\n        trace('EngineView repositionContent');\n\n        posFrame = posFrame || this._posFrame || { x: 0, y: 0, w: 800, h: 600 };\n\n        this.position.x = posFrame.x;\n        this.position.y = posFrame.y;\n\n        this._externalCenter = {\n            x: posFrame.w >> 1,\n            y: posFrame.h >> 1,\n        };\n        this.centralizeToCurrentFocusLocation(true);\n\n        if (this._bg) {\n            this._bg.clear();\n            // this._bg.lineStyle(2, 0x000000, 1);\n            this._bg.beginFill(this._config.backgroundColor, 1.0);\n            this._bg.drawRect(0, 0, posFrame.w, posFrame.h);\n            this._bg.endFill();\n        }\n\n        if (this._mapMask && this._mapContainer) {\n            this._mapMask.clear();\n            this._mapMask.beginFill(0x000000);\n            this._mapMask.drawRect(0, 0, posFrame.w, posFrame.h);\n            this._mapMask.endFill();\n\n            this._mapContainer.mask = this._mapMask;\n        }\n\n        this._posFrame = posFrame;\n    }\n    /**\n     * Clears all references and stops all animations inside the engine.\n     * Call this method when you want to get rid of an engine instance.\n     *\n     * @method\n     * @function\n     * @public\n     */\n    public destroy(): void {\n        trace('EngineView destroy');\n\n        this.disableInteraction();\n\n        this.moveEngine.destroy();\n        this.moveEngine = null;\n\n        let item, i, j, k;\n        for (i = 0; i < this._mapSizeR; i++) {\n            for (j = this._mapSizeC - 1; j >= 0; j--) {\n                item = this._tileArray[i][j];\n                if (item) {\n                    item.destroy();\n                    // this._groundContainer.removeChild(item);\n                }\n                this._tileArray[i][j] = null;\n\n                item = this._objArray[i][j];\n                if (item) {\n                    for (k = 0; k < item.length; k++) {\n                        if (item[k]) {\n                            item[k].destroy();\n                            // this._objContainer.removeChild(item[k]);\n                        }\n                        item[k] = null;\n                    }\n                }\n                this._objArray[i][j] = null;\n            }\n        }\n        item = null;\n\n        this._pathFinding.destroy();\n        this._pathFinding = null;\n\n        this._currentControllable = null;\n        this._tileArray = null;\n        this._objArray = null;\n        this._bg = null;\n        this._groundContainer = null;\n        this._objContainer = null;\n\n        if (this._mapContainer) {\n            this._mapContainer.mask = null;\n            this.removeChild(this._mapContainer);\n            this._mapContainer = null;\n        }\n        if (this._mapMask) {\n            this.removeChild(this._mapMask);\n            this._mapMask = null;\n        }\n\n        this._config = null;\n        this.mapData.groundMapData = null;\n        this.mapData.objectsMapData = null;\n        this.mapData.objects = null;\n        this.mapData.tiles = null;\n        this.mapData = null;\n    }\n\n    // Externally modifiable properties for EngineView\n    /**\n     * specifies whether to zoom instantly or with a tween animation\n     * @property\n     * @default false\n     */\n    public get instantCameraZoom(): boolean {\n        return this._config.instantCameraZoom;\n    }\n    public set instantCameraZoom(value: boolean) {\n        this._config.instantCameraZoom = value;\n    }\n    /**\n     * defines if the camera will follow the current controllable or not\n     * @property\n     * @default true\n     */\n    public get followCharacter(): boolean {\n        return this._config.followCharacter;\n    }\n    public set followCharacter(value: boolean) {\n        this._config.followCharacter = value;\n    }\n    /**\n     * specifies whether the camera moves instantly or with a tween animation to the target location\n     * @property\n     * @default false\n     */\n    public get instantCameraRelocation(): boolean {\n        return this._config.instantCameraRelocation;\n    }\n    public set instantCameraRelocation(value: boolean) {\n        this._config.instantCameraRelocation = value;\n    }\n    /**\n     * specifies whether the map-objects will be moved to target location instantly or with an animation\n     * @property\n     * @default false\n     */\n    public get instantObjectRelocation(): boolean {\n        return this._config.instantObjectRelocation;\n    }\n    public set instantObjectRelocation(value: boolean) {\n        this._config.instantObjectRelocation = value;\n    }\n    /**\n     * make objects transparent when the controllable is behind them\n     * @property\n     * @default true\n     */\n    public get changeTransparencies(): boolean {\n        return this._config.changeTransparencies;\n    }\n    public set changeTransparencies(value: boolean) {\n        this._config.changeTransparencies = value;\n    }\n    /**\n     * highlight the path when the current controllable moves on the map\n     * @property\n     * @default true\n     */\n    public get highlightPath(): boolean {\n        return this._config.highlightPath;\n    }\n    public set highlightPath(value: boolean) {\n        this._config.highlightPath = value;\n    }\n    /**\n     * Highlight the target tile when the current controllable moves on the map\n     * @property\n     * @default true\n     */\n    public get highlightTargetTile(): boolean {\n        return this._config.highlightTargetTile;\n    }\n    public set highlightTargetTile(value: boolean) {\n        this._config.highlightTargetTile = value;\n    }\n    /**\n     * animate the tile highlights\n     * @property\n     * @default true\n     */\n    public get tileHighlightAnimated(): boolean {\n        return this._config.tileHighlightAnimated;\n    }\n    public set tileHighlightAnimated(value: boolean) {\n        this._config.tileHighlightAnimated = value;\n    }\n    /**\n     * When a tile selected don't move the controllable immediately but still call 'tileSelectCallback'\n     * @property\n     * @default false\n     */\n    public get dontAutoMoveToTile(): boolean {\n        return this._config.dontAutoMoveToTile;\n    }\n    public set dontAutoMoveToTile(value: boolean) {\n        this._config.dontAutoMoveToTile = value;\n    }\n    /**\n     * Engine looks for a path every time an object moves to a new tile on the path\n     * (set to false if you don't have moving objects other then your controllable on your map)\n     * @property\n     * @default true\n     */\n    public get checkPathOnEachTile(): boolean {\n        return this._config.checkPathOnEachTile;\n    }\n    public set checkPathOnEachTile(value: boolean) {\n        this._config.checkPathOnEachTile = value;\n    }\n    /**\n     * enable dragging the map with touch-and-touchmove or mousedown-and-mousemove on the map\n     * @property\n     * @default true\n     */\n    public get mapDraggable(): boolean {\n        return this._config.mapDraggable;\n    }\n    public set mapDraggable(value: boolean) {\n        this._config.mapDraggable = value;\n    }\n    /**\n     * callback function that will be called once everything is loaded and engine instance is ready\n     * @property\n     * @default null\n     */\n    public get engineInstanceReadyCallback(): (engineInstance: EngineView) => unknown {\n        return this._config.engineInstanceReadyCallback;\n    }\n    public set engineInstanceReadyCallback(value: (engineInstance: EngineView) => unknown) {\n        this._config.engineInstanceReadyCallback = value;\n    }\n    /**\n     * callback function that will be called when a tile is selected. Params will be the row and column indexes of the tile selected.\n     * @property\n     * @default null\n     */\n    public get tileSelectCallback(): (r: number, c: number) => unknown {\n        return this._config.tileSelectCallback;\n    }\n    public set tileSelectCallback(value: (r: number, c: number) => unknown) {\n        this._config.tileSelectCallback = value;\n    }\n    /**\n     * callback function that will be called when a tile with an interactive map-object on it is selected. Call param will be the object selected.\n     * @property\n     * @default null\n     */\n    public get objectSelectCallback(): (objectView: ObjectView) => unknown {\n        return this._config.objectSelectCallback;\n    }\n    public set objectSelectCallback(value: (objectView: ObjectView) => unknown) {\n        this._config.objectSelectCallback = value;\n    }\n    /**\n     * callback function that will be called when any moving object reaches its destination. Call param will be the moving object itself.\n     * @property\n     * @default null\n     */\n    public get objectReachedDestinationCallback(): (objectView: ObjectView) => unknown {\n        return this._config.objectReachedDestinationCallback;\n    }\n    public set objectReachedDestinationCallback(value: (objectView: ObjectView) => unknown) {\n        this._config.objectReachedDestinationCallback = value;\n    }\n    /**\n     * callback function that will be called when any moving object is in move and there are other objects on the next tile. Call params will be the moving object and an array of objects on the next tile.\n     * @property\n     * @default null\n     */\n    public get otherObjectsOnTheNextTileCallback(): (\n        objectView: ObjectView,\n        otherObjectViews: ObjectView[]\n    ) => unknown {\n        return this._config.otherObjectsOnTheNextTileCallback;\n    }\n    public set otherObjectsOnTheNextTileCallback(\n        value: (objectView: ObjectView, otherObjectViews: ObjectView[]) => unknown\n    ) {\n        this._config.otherObjectsOnTheNextTileCallback = value;\n    }\n    /**\n     * callback function that will be called every time an objects direction or position changed\n     * @property\n     * @default null\n     */\n    public get objectUpdateCallback(): (objectView: ObjectView) => unknown {\n        return this._config.objectUpdateCallback;\n    }\n    public set objectUpdateCallback(value: (objectView: ObjectView) => unknown) {\n        this._config.objectUpdateCallback = value;\n    }\n    /**\n     * alpha value for the tile highlight stroke (this will be overridden if a highlight-image is defined)\n     * @property\n     * @default 1.0\n     */\n    public get tileHighlightStrokeAlpha(): number {\n        return this._config.tileHighlightStrokeAlpha;\n    }\n    public set tileHighlightStrokeAlpha(value: number) {\n        this._config.tileHighlightStrokeAlpha = value;\n    }\n    /**\n     * color code for the tile highlight stroke (this will be overridden if a highlight-image is defined)\n     * @property\n     * @default 0xFFFFFF\n     */\n    public get tileHighlightStrokeColor(): number {\n        return this._config.tileHighlightStrokeColor;\n    }\n    public set tileHighlightStrokeColor(value: number) {\n        this._config.tileHighlightStrokeColor = value;\n    }\n    /**\n     * alpha value for the tile highlight fill (this will be overridden if a highlight-image is defined)\n     * @property\n     * @default 1.0\n     */\n    public get tileHighlightFillAlpha(): number {\n        return this._config.tileHighlightFillAlpha;\n    }\n    public set tileHighlightFillAlpha(value: number) {\n        this._config.tileHighlightFillAlpha = value;\n    }\n    /**\n     * color code for the tile highlight fill (this will be overridden if a highlight-image is defined)\n     * @property\n     * @default 0x80d7ff\n     */\n    public get tileHighlightFillColor(): number {\n        return this._config.tileHighlightFillColor;\n    }\n    public set tileHighlightFillColor(value: number) {\n        this._config.tileHighlightFillColor = value;\n    }\n}\n","let saidHello = false;\nconst VERSION = '$_VERSION';\n\n/**\n * Skips the hello message of renderers that are created after this is run.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @function\n * @method\n * @static\n * @public\n */\nexport function skipHello(): void {\n    saidHello = true;\n}\n\n/**\n * Logs out the version information for this running instance of TRAVISO.\n * If you don't want to see this message you can run `TRAVISO.skipHello()` before\n * creating your engine.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @function\n * @method\n * @static\n * @public\n */\nexport function sayHello(): void {\n    if (saidHello) {\n        return;\n    }\n\n    if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        const args = [\n            `\\n %c %c %c Traviso.js - ${VERSION}  %c  %c  http://www.travisojs.com/  %c  \\n\\n`,\n            'background: #18bc9c; padding:5px 0;',\n            'background: #18bc9c; padding:5px 0;',\n            'color: #18bc9c; background: #030307; padding:5px 0;',\n            'background: #18bc9c; padding:5px 0;',\n            'background: #5ad2ba; padding:5px 0;',\n            'background: #18bc9c; padding:5px 0;',\n        ];\n\n        self.console.log(...args);\n    } else if (self.console) {\n        self.console.log(`Traviso.js ${VERSION} - http://www.travisojs.com/`);\n    }\n\n    saidHello = true;\n}\n","/**\n * String of the current TRAVISO version.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @property\n * @static\n * @public\n * @constant\n */\n\nexport const VERSION: Readonly<string> = '$_VERSION';\n","import { TEngineConfiguration, EngineView } from './map/EngineView';\nimport { sayHello } from './utils/hello';\nimport { enableDisableLogging, trace } from './utils/trace';\nimport { VERSION } from './version';\n\n/**\n * Type declaration for global traviso configuration.\n */\nexport type TTravisoConfiguration = {\n    /**\n     * Determines if TRAVISO can log helper text.\n     * @default false\n     */\n    logEnabled: boolean;\n};\n\n/**\n * Main TRAVISO namespace.\n *\n * @namespace TRAVISO\n */\nexport * from './version';\nexport * from './map/EngineView';\nexport { TileView } from './map/TileView';\nexport { ObjectView } from './map/ObjectView';\nexport { skipHello } from './utils/hello';\nexport * from './utils/trace';\nexport { existy, mathMap, dotProduct, getUnit, getDist, isInPolygon } from './utils/calculations';\nexport {\n    TDirection,\n    TDirections,\n    DIRECTIONS,\n    PF_ALGORITHMS,\n    TPathFindingAlgorithms,\n    TPathFindingAlgorithmID,\n} from './utils/constants';\nexport { TColumnRowPair, TPositionPair } from './utils/map';\n\n/**\n * Global configuration settings for traviso\n *\n * @property\n * @private\n * @internal\n */\nlet config: TTravisoConfiguration = {\n    logEnabled: false,\n};\n\n/**\n * Flag defining whether traviso is set or not\n *\n * @property\n * @private\n * @internal\n */\nlet isReady: boolean = false;\n\n/**\n * Initializes traviso global settings if it hasn't been already.\n *\n * @method\n * @function\n * @internal\n *\n * @param globalConfig {TTravisoConfiguration} configuration object for the traviso engine\n */\nconst init = (globalConfig: TTravisoConfiguration): void => {\n    // do necessary checks and assignments for global settings\n    if (globalConfig) {\n        config = {\n            ...config,\n            ...globalConfig,\n        };\n        config.logEnabled = enableDisableLogging(globalConfig.logEnabled);\n    }\n    if (isReady) {\n        return;\n    }\n    isReady = true;\n    sayHello();\n    trace('Traviso initiated. (Version: ' + VERSION + ')');\n};\n\n/**\n * Creates and returns an isometric engine instance with the provided configuration.\n * Also initializes traviso global settings if it hasn't been already.\n *\n * @memberof TRAVISO\n * @for TRAVISO\n *\n * @method\n * @function\n * @public\n * @static\n *\n * @param instanceConfig {TEngineConfiguration} Configuration object for the isometric instance, required\n * @param globalConfig {TTravisoConfiguration} Configuration object for the traviso engine, default null\n *\n * @returns {EngineView} A new instance of the isometric engine\n */\nexport const getEngineInstance = (\n    instanceConfig: TEngineConfiguration,\n    globalConfig: TTravisoConfiguration = null\n): EngineView => {\n    init(globalConfig);\n    return new EngineView(instanceConfig);\n};\n\nexport {};\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","existy","value","mathMap","v","min1","max1","min2","max2","noOutliers","getUnit","m","Math","sqrt","x","y","isInPolygon","gp","vertices","j","testY","testX","nVert","c","getDist","p1","p2","DIRECTIONS","O","S","SW","W","NW","N","NE","E","SE","RESERVED_TEXTURE_IDS","PF_ALGORITHMS","ASTAR_ORTHOGONAL","ASTAR_DIAGONAL","logEnabled","trace","self","console","log","enableDisableLogging","enabled","getObjectTextures","engine","objectType","visualId","objInfo","mapData","objects","textures","textureNames","Texture","from","Error","type","animSpeed","_super","_this","onContainerAnimComplete_delayed_binded","onContainerAnimComplete_delayed","bind","onContainerAnimComplete_binded","onContainerAnimComplete","_engine","_type","info","key","f","nt","io","rowSpan","columnSpan","getObjectInfo","isMovableTo","isInteractive","interactive","interactiveChildren","isFloorObject","noTransparency","xAnchor","_textures","_interactionOffsets","currentInteractionOffset","idle","_container","AnimatedSprite","anchor","addChild","gotoAndStop","ObjectView","animationSpeed","direction","moving","stopOnFirstFrame","noLoop","onAnimComplete","changeVisual","dir","getStationaryDirVisualId","currentDirection","vId","loop","onContainerAnimCompleteCallback","onComplete","gotoAndPlay","objectUpdateCallback","setTimeout","Container","onHighlightTweenEnd_binded","onHighlightTweenEnd","halfHeight","tileHalfHeight","halfWidth","tileHalfWidth","tileInfo","tileType","tiles","movable","path","singleGroundImage","parseInt","getTileInfo","_tileGraphics","tileHighlightImage","_highlightedOverlay","Sprite","Graphics","clear","lineStyle","tileHighlightStrokeAlpha","tileHighlightStrokeColor","beginFill","tileHighlightFillColor","tileHighlightFillAlpha","moveTo","lineTo","endFill","scale","visible","TileView","isHighlighted","instant","_isHighlighted","ts","moveEngine","addTween","killTweensOf","linearTween","easeInQuad","easeOutQuad","easeInOutQuad","defaultSpeed","_defaultSpeed","_processFunc","run","_ticker","Ticker","add","start","MoveEngine","o","duration","vars","delay","easing","overwrite","e","prop","target","Number","easingFunc","totalFrames","_fps","currentFrame","_tweenTargets","indexOf","tweens","_activeForTweens","targetRemoved","idx","idx2","splice","len","_movables","_activeForMovables","speedUnit","speed","currentPath","currentTarget","currentPathStep","speedMagnitude","pos","px","getTilePosXFor","r","py","getTilePosYFor","position","currentReachThresh","ceil","_processFrame","prevPosition","onObjMoveStepEnd","checkForTileChange","checkForFollowCharacter","tt","removeTween","stop","removeAllMovables","removeAllTweens","weight","mapPos","GridNode","fromNeighbor","scoreFunction","content","BinaryHeap","element","push","sinkDown","result","end","pop","bubbleUp","node","parentN","parent_1","elemScore","conditionMet","child2N","child1N","swap","child1Score","child1","child2","mapSizeC","mapSizeR","options","nodes","diagonal","heuristic","PathFinding","HEURISTICS","manhattan","closest","grid","init","dirtyNodes","cleanNode","ret","rowDebug","row","l","graphString","join","originC","originR","destC","destR","search","cellC","cellR","sizeC","sizeR","cellArray","concat","neighbors","curr","parent","openHeap","getHeap","closestNode","h","size","currentNode","pathTo","closed","il","neighbor","isWall","gScore","g","getCost","beenVisited","visited","markDirty","rescoreElement","staticWeight","pos0","pos1","abs","D2","d1","d2","min","config","w","onMouseUp_binded","onMouseUp","onMouseDown_binded","onMouseDown","onMouseMove_binded","onMouseMove","_config","followCharacter","changeTransparencies","highlightPath","highlightTargetTile","tileHighlightAnimated","dontAutoMoveToTile","checkPathOnEachTile","mapDraggable","isoAngle","EngineView","DEFAULT_ISO_ANGLE","tileHeight","DEFAULT_TILE_H","setZoomParameters","minScale","maxScale","numberOfZoomLevels","initialZoomLevel","instantCameraZoom","tan","PI","loadAssetsAndData","mapDataPath","split","loader","Loader","assetsToLoad","load","assetsAndDataLoaded","arr","resources","data","initialControllableLocation","columnIndex","rowIndex","obj","objId","visual","interactionOffsets","oTextures","rows","groundMap","groundMapData","replace","objectsMap","objectsMapData","visuals","id","ipor","ipoc","frames","extension","numberOfFrames","startIndex","floor","onAllAssetsLoaded","_currentScale","_currentZoom","_posFrame","initialPositionFrame","_externalCenter","createMap","repositionContent","enableInteraction","engineInstanceReadyCallback","backgroundColor","_bg","useMask","_mapMask","_mapContainer","_groundContainer","_objContainer","groundImageSprite","tile","_mapSizeR","_mapSizeC","set","_tileArray","_objArray","_pathFinding","pathFindingType","pathFindingClosest","setCell","floorObjectFound","addObjRefToLocation","_currentControllable","a","k","_mapVertices","_mapVisualWidthReal","_mapVisualHeightReal","width","height","zoomTo","centralizeToLocation","centralizeToCurrentExternalCenter","show","addObjectToLocation","arrangeDepthsFromLocation","displayObject","removeChild","removeObjRefFromLocation","focusMapToLocation","zoomAmount","instantCameraRelocation","instantRelocate","_currentFocusLocation","_mapVisualWidthScaled","centralizeToPoint","minZoom","maxZoom","zoomIncrement","instantZoom","round","diff","oldScale","setScale","ratio","addObjRefToSingleLocation","setDynamicCell","removeObjRefFromSingleLocation","index","alpha","prevPos","changeObjAlphasInLocation","newPath","pathItem","setHighlighted","currentTargetTile","removeMovable","instantObjectRelocation","arrangeObjTransparencies","arrangeObjLocation","arrangePathHighlight","stopObject","prepareForMove","onObjMoveStepBegin","r1","c1","r2","c2","changeVisualToDirection","isCellFilled","checkAndMoveObjectToLocation","setMoveParameters","addMovable","pathEnded","moveObjThrough","objectReachedDestinationCallback","getObjectsAtLocation","otherObjectsOnTheNextTileCallback","to","solve","getPath","targetPos","minPath","tempFlagHolder","getAdjacentOpenCells","minLength","lp","closestTile","thresh","dist","closestDist","interactionData","toLocal","global","getTileFromLocalPos","objectSelectCallback","checkAndMoveObjectToTile","tileSelectCallback","on","off","_dragging","event","globalPos","isInteractionInMask","_dragInitStartingX","_dragPrevStartingX","_dragInitStartingY","_dragPrevStartingY","distX","distY","checkForTileClick","posFrame","centralizeToCurrentFocusLocation","drawRect","mask","item","disableInteraction","destroy","saidHello","VERSION","isReady","globalConfig","navigator","userAgent","toLowerCase","args","_a","sayHello","v1","v2","instanceConfig"],"mappings":"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"}